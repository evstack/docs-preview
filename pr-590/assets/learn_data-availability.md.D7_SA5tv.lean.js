import{_ as t,c as l,a3 as e,o as i}from"./chunks/framework.BFmD_fnx.js";const h=JSON.parse('{"title":"Data Availability in Rollkit","description":"","frontmatter":{"head":[["meta",{"name":"og:title","content":"Data Availability in Rollkit | Rollkit"},{"name":"og:description","content":false}]]},"headers":[],"relativePath":"learn/data-availability.md","filePath":"learn/data-availability.md","lastUpdated":1752169118000}'),o={name:"learn/data-availability.md"};function r(n,a,s,d,c,p){return i(),l("div",null,a[0]||(a[0]=[e('<h1 id="data-availability-in-rollkit" tabindex="-1">Data Availability in Rollkit <a class="header-anchor" href="#data-availability-in-rollkit" aria-label="Permalink to &quot;Data Availability in Rollkit&quot;">​</a></h1><p>Data availability (DA) is a core component of Rollkit&#39;s modular rollup framework. In Rollkit, data availability ensures that all transaction data and block information required to verify the rollup&#39;s state is accessible to anyone running a node or light client.</p><h2 id="how-rollkit-handles-data-availability" tabindex="-1">How Rollkit Handles Data Availability <a class="header-anchor" href="#how-rollkit-handles-data-availability" aria-label="Permalink to &quot;How Rollkit Handles Data Availability&quot;">​</a></h2><p>Rollkit is designed to be DA-agnostic, meaning it can integrate with different data availability layers depending on your needs. The main options are:</p><ul><li><p><strong>Mock Data Availability (Mock DA):</strong></p><ul><li>Simple in-memory DA layer that is great for testing and development.</li><li>Data is stored and served by the rollup node itself.</li><li>Not secure for production, as data can be withheld by the node operator.</li></ul></li><li><p><strong>Local Data Availability (Local DA):</strong></p><ul><li>Used for development, testing, and local deployments.</li><li>Not secure for production, as data can be withheld by the node operator.</li></ul></li><li><p><strong>External Data Availability Layer (DA Interface):</strong></p><ul><li>Used for production and secure deployments.</li><li>Rollkit can post block data to any external DA layer that implements the Rollkit <a href="https://github.com/rollkit/rollkit/blob/main/core/da/da.go#L11" target="_blank" rel="noreferrer">DA interface</a> (e.g., Celestia).</li><li>Anyone can verify that the data is available and reconstruct the rollup state, depending on the guarantees of the chosen DA layer.</li></ul></li></ul><h2 id="why-data-availability-matters-in-rollkit" tabindex="-1">Why Data Availability Matters in Rollkit <a class="header-anchor" href="#why-data-availability-matters-in-rollkit" aria-label="Permalink to &quot;Why Data Availability Matters in Rollkit&quot;">​</a></h2><ul><li><p><strong>Fraud Proofs and Security:</strong></p><ul><li>Rollkit rollups rely on data availability to enable fraud proofs and ensure that invalid state transitions can be challenged.</li><li>If data is unavailable, users cannot verify the rollup&#39;s state or submit fraud proofs.</li></ul></li><li><p><strong>Interoperability:</strong></p><ul><li>By supporting multiple DA layers, Rollkit enables rollups to be deployed in a variety of environments, from local devnets to scalable, decentralized networks.</li></ul></li></ul><h2 id="best-practices" tabindex="-1">Best Practices <a class="header-anchor" href="#best-practices" aria-label="Permalink to &quot;Best Practices&quot;">​</a></h2><ul><li><strong>Use Mock or Local DA only for development and testing.</strong></li><li><strong>For production, always use a decentralized DA layer that implements the Rollkit DA interface.</strong></li></ul><h2 id="learn-more" tabindex="-1">Learn More <a class="header-anchor" href="#learn-more" aria-label="Permalink to &quot;Learn More&quot;">​</a></h2><ul><li><a href="/docs-preview/pr-590/guides/da/local-da">Set up a local DA</a></li><li><a href="/docs-preview/pr-590/guides/da/celestia-da">Set up Celestia DA</a></li><li><a href="https://docs.celestia.org/" target="_blank" rel="noreferrer">Celestia Docs</a></li></ul>',11)]))}const b=t(o,[["render",r]]);export{h as __pageData,b as default};
