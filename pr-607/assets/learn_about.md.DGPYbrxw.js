import{_ as t,c as a,a3 as o,o as i}from"./chunks/framework.CkOHourH.js";const p=JSON.parse('{"title":"Introduction","description":"","frontmatter":{"head":[["meta",{"name":"og:title","content":"Introduction | Evolve"},{"name":"og:description","content":false}]]},"headers":[],"relativePath":"learn/about.md","filePath":"learn/about.md","lastUpdated":1753886175000}'),n={name:"learn/about.md"};function r(s,e,l,c,h,d){return i(),a("div",null,e[0]||(e[0]=[o('<h1 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h1><p>Welcome to Evolve. Launch Fast. Build Your Own Network.</p><p>Evolve enables developers a direct path to shipping custom networks — faster than standing up a full L1, and more flexible than constrained rollup frameworks.</p><p>This isn&#39;t a toolkit. It&#39;s a launch stack.</p><p>No fees. No middlemen. No revenue share.</p><h2 id="about-evolve" tabindex="-1">About Evolve <a class="header-anchor" href="#about-evolve" aria-label="Permalink to &quot;About Evolve&quot;">​</a></h2><p>Our mission is to provide developers with the fastest path to launching their own networks. Built on Celestia, Evolve gives you full control over execution without the overhead of validator operations.</p><h2 id="what-is-evolve" tabindex="-1">What is Evolve? <a class="header-anchor" href="#what-is-evolve" aria-label="Permalink to &quot;What is Evolve?&quot;">​</a></h2><p>Evolve is how you launch your network. Modular. Production-ready. Yours.</p><p>Some still call them rollups. You&#39;ll just call it your network.</p><p>Evolve reframes the conversation: these aren&#39;t second-class layers. These are networks — with full execution freedom, developer control, and modular power.</p><p>Evolve is an <a href="https://github.com/evstack/ev-node" target="_blank" rel="noreferrer">open-source framework</a>. It features ev-node, a modular node that can run networks and exposes an <a href="https://github.com/cometbft/cometbft/tree/main/abci" target="_blank" rel="noreferrer">ABCI-compatible client interface</a>, which can be used as a substitute for CometBFT in any ABCI-compatible blockchain application.</p><p>With Evolve, you get:</p><ul><li>Full control over execution</li><li>No validator ops overhead</li><li>Speed to traction</li></ul><p>Powered by Celestia — toward 1GB blocks, multi-VM freedom, and execution without compromising flexibility or cost.</p><h2 id="what-problems-is-evolve-solving" tabindex="-1">What problems is Evolve solving? <a class="header-anchor" href="#what-problems-is-evolve-solving" aria-label="Permalink to &quot;What problems is Evolve solving?&quot;">​</a></h2><h3 id="_1-scalability-and-customizability" tabindex="-1">1. Scalability and customizability <a class="header-anchor" href="#_1-scalability-and-customizability" aria-label="Permalink to &quot;1. Scalability and customizability&quot;">​</a></h3><p>Deploying your decentralized application as a smart contract on a shared blockchain has many limitations. Your smart contract has to share computational resources with every other application, so scalability is limited.</p><p>Plus, you&#39;re restricted to the execution environment that the shared blockchain uses, so developer flexibility is limited.</p><h3 id="_2-security-and-time-to-market" tabindex="-1">2. Security and time to market <a class="header-anchor" href="#_2-security-and-time-to-market" aria-label="Permalink to &quot;2. Security and time to market&quot;">​</a></h3><p>Deploying a new chain might sound like the perfect solution for the problems listed above. While it&#39;s somewhat true, deploying a new layer 1 chain presents a complex set of challenges and trade-offs for developers looking to build blockchain products.</p><p>Deploying a new layer 1 requires significant resources, including time, capital, and expertise, which can be a barrier to entry for some developers.</p><p>In order to secure the network, developers must bootstrap a sufficiently secure set of validators, incurring the overhead of managing a full consensus network. This requires paying validators with inflationary tokens, putting the business sustainability of the network at risk. A strong community and network effect are also critical for success, but can be challenging to achieve as the network must gain widespread adoption to be secure and valuable.</p><p>In a potential future with millions of chains, it&#39;s unlikely all of those chains will be able to sustainably attract a sufficiently secure and decentralized validator set.</p><h2 id="why-evolve" tabindex="-1">Why Evolve? <a class="header-anchor" href="#why-evolve" aria-label="Permalink to &quot;Why Evolve?&quot;">​</a></h2><p>Evolve solves the challenges encountered during the deployment of a smart contract or a new layer 1, by minimizing these tradeoffs through the implementation of sovereign chains.</p><p>With Evolve, developers can benefit from:</p><ul><li><p><strong>Shared security</strong>: Chains inherit security from a data availability layer, by posting blocks to it. Chains reduce the trust assumptions placed on chain sequencers by allowing full nodes to download and verify the transactions in the blocks posted by the sequencer. For optimistic or zk chains, in case of fraudulent blocks, full nodes can generate fraud or zk proofs, which they can share with the rest of the network, including light nodes. Our roadmap includes the ability for light clients to receive and verify proofs, so that everyday users can enjoy high security guarantees.</p></li><li><p><strong>Scalability:</strong> Evolve chains are deployed on specialized data availability layers like Celestia, which directly leverages the scalability of the DA layer. Additionally, chain transactions are executed off-chain rather than the data availability layer. This means chains have their own dedicated computational resources, rather than sharing computational resources with other applications.</p></li><li><p><strong>Customizability:</strong> Evolve is built as an open source modular framework, to make it easier for developers to reuse the four main components and customize their chains. These components are data availability layers, execution environments, proof systems, and sequencer schemes.</p></li><li><p><strong>Faster time to market:</strong> Evolve eliminates the need to bootstrap a validator set, manage a consensus network, incur high economic costs, and face other trade-offs that come with deploying a new layer 1. Evolve&#39;s goal is to make deploying a chain as easy as it is to deploy a smart contract, cutting the time it takes to bring blockchain products to market from months or even years to just minutes.</p></li><li><p><strong>Sovereignty</strong>: Evolve also enables developers to deploy sovereign chains for cases where communities require sovereignty.</p></li></ul><h2 id="how-can-you-use-evolve" tabindex="-1">How can you use Evolve? <a class="header-anchor" href="#how-can-you-use-evolve" aria-label="Permalink to &quot;How can you use Evolve?&quot;">​</a></h2><p>As briefly mentioned above, Evolve could be used in many different ways. From sovereign chains, to settlement layers, and in the future even to L3s.</p><h3 id="chain-with-any-execution-environment" tabindex="-1">Chain with any execution environment <a class="header-anchor" href="#chain-with-any-execution-environment" aria-label="Permalink to &quot;Chain with any execution environment&quot;">​</a></h3><p>Evolve gives developers the flexibility to use pre-existing ABCI-compatible state machines or create a custom state machine tailored to their chain needs. Evolve does not restrict the use of any specific virtual machine, allowing developers to experiment and bring innovative applications to life.</p><h3 id="sovereign-chain-with-cosmos-sdk" tabindex="-1">Sovereign chain with Cosmos SDK <a class="header-anchor" href="#sovereign-chain-with-cosmos-sdk" aria-label="Permalink to &quot;Sovereign chain with Cosmos SDK&quot;">​</a></h3><p>Similarly to how developers utilize the Cosmos SDK to build a sovereign layer 1 chain, the Cosmos SDK could be utilized to create a Evolve-compatible chain. Cosmos-SDK has great <a href="https://docs.cosmos.network/main" target="_blank" rel="noreferrer">documentation</a> and tooling that developers can leverage to learn.</p><p>Another possibility is taking an existing layer 1 built with the Cosmos SDK and deploying it as a Evolve chain. This can provide a great opportunity for experimentation and growth.</p><h3 id="build-a-settlement-layer" tabindex="-1">Build a settlement layer <a class="header-anchor" href="#build-a-settlement-layer" aria-label="Permalink to &quot;Build a settlement layer&quot;">​</a></h3><p><a href="https://celestia.org/learn/modular-settlement-layers/settlement-in-the-modular-stack/" target="_blank" rel="noreferrer">Settlement layers</a> are ideal for developers who want to avoid deploying sovereign chains. They provide a platform for chains to verify proofs and resolve disputes. Additionally, they act as a hub for chains to facilitate trust-minimized token transfers and liquidity sharing between chains that share the same settlement layer. Think of settlement layers as a special type of execution layer.</p><h2 id="when-can-you-use-evolve" tabindex="-1">When can you use Evolve? <a class="header-anchor" href="#when-can-you-use-evolve" aria-label="Permalink to &quot;When can you use Evolve?&quot;">​</a></h2><p>As of today, Evolve is still in the alpha stage. The framework currently provides a centralized sequencer, an execution interface (ABCI or Cosmos SDK), and a connection to a data availability layer.</p><p>We&#39;re currently working on implementing many new and exciting features such as light nodes and state fraud proofs.</p><p>Head down to the next section to learn more about what&#39;s coming for Evolve. If you&#39;re ready to start building, you can skip to the <a href="/docs-preview/pr-607/guides/gm-world">Guides</a> section.</p><p>Spoiler alert, whichever you choose, it&#39;s going to be a great rabbit hole!</p>',42)]))}const v=t(n,[["render",r]]);export{p as __pageData,v as default};
