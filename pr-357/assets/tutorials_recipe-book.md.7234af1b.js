import{_ as s,o as a,c as n,X as e}from"./chunks/framework.a93cc8d3.js";const o="/docs-preview/pr-357/recipes/recipe-start.gif",p="/docs-preview/pr-357/recipes/recipes.gif",l="/docs-preview/pr-357/recipes/query.gif",h=JSON.parse('{"title":"🥗 Recipe Book rollup","description":"","frontmatter":{"head":[["meta",{"name":"og:title","content":"🥗 Recipe Book rollup | Rollkit"},{"name":"og:description","content":false}]]},"headers":[],"relativePath":"tutorials/recipe-book.md","filePath":"tutorials/recipe-book.md","lastUpdated":1714642093000}'),t={name:"tutorials/recipe-book.md"},c=e(`<h1 id="🥗-recipe-book-rollup" tabindex="-1">🥗 Recipe Book rollup <a class="header-anchor" href="#🥗-recipe-book-rollup" aria-label="Permalink to &quot;🥗 Recipe Book rollup&quot;">​</a></h1><h2 id="overview" tabindex="-1">📖 Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;📖 Overview {#overview}&quot;">​</a></h2><p>In this tutorial, we are going to build a blockchain for your favorite recipes. The goal of this tutorial is to create a Rollkit rollup with a module that allows you to write and read data to and from your application-specific blockchain. The end user will be able to submit new recipes and read them from the blockchain.</p><p>In the <a href="/docs-preview/pr-357/tutorials/gm-world"><code>GM world</code> tutorial</a>, we defined a new API endpoint and modified a keeper query function to return static data. In this tutorial, we will be modifying the state with transactions (Cosmos SDK messages) that are routed to a module and its message handlers, which are sent to the <code>recipes</code> blockchain.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>This tutorial will explore developing with Rollkit, which is still in Alpha stage. If you run into bugs, please write a Github <a href="https://github.com/rollkit/docs/issues/new" target="_blank" rel="noreferrer">Issue ticket</a> or let us know in our <a href="https://t.me/rollkit" target="_blank" rel="noreferrer">Telegram</a>.</p><p>Learn how to <a href="/docs-preview/pr-357/guides/restart-rollup">restart your rollup</a>.</p></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>The script for this tutorial is built for Celestia&#39;s <a href="https://docs.celestia.org/nodes/arabica-devnet" target="_blank" rel="noreferrer">Arabica devnet</a>.</p></div><h2 id="prerequisites" tabindex="-1">💻 Prerequisites <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;💻 Prerequisites {#prerequisites}&quot;">​</a></h2><ul><li><a href="/docs-preview/pr-357/tutorials/gm-world">GM world tutorial</a></li></ul><h2 id="scaffolding-your-rollup" tabindex="-1">🏗 Scaffolding your rollup <a class="header-anchor" href="#scaffolding-your-rollup" aria-label="Permalink to &quot;🏗 Scaffolding your rollup {#scaffolding-your-rollup}&quot;">​</a></h2><h3 id="ignite-scaffold-recipes-rollup" tabindex="-1">🔥 Use Ignite CLI to scaffold a <code>recipes</code> rollup <a class="header-anchor" href="#ignite-scaffold-recipes-rollup" aria-label="Permalink to &quot;🔥 Use Ignite CLI to scaffold a \`recipes\` rollup {#ignite-scaffold-recipes-rollup}&quot;">​</a></h3><p>Run the following command to scaffold your <code>recipes</code> chain using Ignite CLI:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">ignite</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">scaffold</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">chain</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">recipes</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--address-prefix</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">recipes</span></span></code></pre></div><p>Your new <code>recipes</code> chain has been scaffolded and <code>--address-prefix recipes</code> allows the address prefix to be <code>recipes</code> instead of <code>cosmos</code>.</p><p>Change into the <code>recipes</code> directory:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">recipes</span></span></code></pre></div><h3 id="installing-rollkit" tabindex="-1">💎 Installing Rollkit <a class="header-anchor" href="#installing-rollkit" aria-label="Permalink to &quot;💎 Installing Rollkit {#installing-rollkit}&quot;">​</a></h3><p>To swap out CometBFT for Rollkit, run the following commands:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">go</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mod</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">edit</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-replace</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">github.com/cosmos/cosmos-sdk=github.com/rollkit/cosmos-sdk@v0.50.5-rollkit-v0.13.1-no-fraud-proofs</span></span>
<span class="line"><span style="color:#FFCB6B;">go</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mod</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tidy</span></span>
<span class="line"><span style="color:#FFCB6B;">go</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mod</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">download</span></span></code></pre></div><h2 id="message-types" tabindex="-1">💬 Message types <a class="header-anchor" href="#message-types" aria-label="Permalink to &quot;💬 Message types {#message-types}&quot;">​</a></h2><h3 id="create-message-types" tabindex="-1">✨ Create message types <a class="header-anchor" href="#create-message-types" aria-label="Permalink to &quot;✨ Create message types {#create-message-types}&quot;">​</a></h3><p>Create a message type and its handler with the <code>message</code> command:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">ignite</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">scaffold</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">message</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">createRecipe</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">dish</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ingredients</span></span></code></pre></div><p>Response:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">modify</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">proto/recipes/recipes/tx.proto</span></span>
<span class="line"><span style="color:#FFCB6B;">modify</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">x/recipes/client/cli/tx.go</span></span>
<span class="line"><span style="color:#FFCB6B;">create</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">x/recipes/client/cli/tx_create_recipe.go</span></span>
<span class="line"><span style="color:#FFCB6B;">create</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">x/recipes/keeper/msg_server_create_recipe.go</span></span>
<span class="line"><span style="color:#FFCB6B;">modify</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">x/recipes/module_simulation.go</span></span>
<span class="line"><span style="color:#FFCB6B;">create</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">x/recipes/simulation/create_recipe.go</span></span>
<span class="line"><span style="color:#FFCB6B;">modify</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">x/recipes/types/codec.go</span></span>
<span class="line"><span style="color:#FFCB6B;">create</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">x/recipes/types/message_create_recipe.go</span></span>
<span class="line"><span style="color:#FFCB6B;">create</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">x/recipes/types/message_create_recipe_test.go</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">🎉</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Created</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">a</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">message</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#FFCB6B;">createRecipe</span><span style="color:#89DDFF;">\`</span><span style="color:#82AAFF;">.</span></span></code></pre></div><p>Head to your <code>recipes/proto/recipes/recipes/tx.proto</code> file and you will see the <code>MsgCreateRecipe</code> has been created. Add <code>uint64 id = 1;</code> to the <code>MsgCreateRecipeResponse</code> function:</p><div class="language-proto"><button title="Copy Code" class="copy"></button><span class="lang">proto</span><pre class="shiki material-theme-palenight has-focused-lines"><code><span class="line"><span style="color:#F78C6C;">message</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MsgCreateRecipeResponse</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line has-focus"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">uint64</span><span style="color:#A6ACCD;"> id </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><h4 id="diving-deeper-into-message-code" tabindex="-1">🤿 Diving deeper into the message code <a class="header-anchor" href="#diving-deeper-into-message-code" aria-label="Permalink to &quot;🤿 Diving deeper into the message code {#diving-deeper-into-message-code}&quot;">​</a></h4><p>Looking further into the message, we can see that <code>MsgCreateRecipe</code> has 3 fields: creator, dish, and ingredients.</p><div class="language-proto"><button title="Copy Code" class="copy"></button><span class="lang">proto</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">message</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MsgCreateRecipe</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">string</span><span style="color:#A6ACCD;"> creator </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">string</span><span style="color:#A6ACCD;"> dish </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">string</span><span style="color:#A6ACCD;"> ingredients </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p>We can also see that the <code>CreateRecipe</code> RPC has already been added to the <code>Msg</code> service:</p><div class="language-proto"><button title="Copy Code" class="copy"></button><span class="lang">proto</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">service</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Msg</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F78C6C;">rpc</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CreateRecipe</span><span style="color:#A6ACCD;">(</span><span style="color:#FFCB6B;">MsgCreateRecipe</span><span style="color:#A6ACCD;">) </span><span style="color:#F78C6C;">returns</span><span style="color:#A6ACCD;"> (</span><span style="color:#FFCB6B;">MsgCreateRecipeResponse</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><h3 id="define-messages-logic" tabindex="-1">📕 Define messages logic <a class="header-anchor" href="#define-messages-logic" aria-label="Permalink to &quot;📕 Define messages logic {#define-messages-logic}&quot;">​</a></h3><p>Navigate to <code>recipes/x/recipes/keeper/msg_server_create_recipe.go</code>. For our recipes chain, we want the dish and ingredients to be written to the blockchain’s state as a new recipe. Add the following code to the <code>CreateRecipe</code> function underneath the imports:</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">k msgServer</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CreateRecipe</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">goCtx context</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Context</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> msg </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">types</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">MsgCreateRecipe</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(*</span><span style="color:#A6ACCD;">types</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">MsgCreateRecipeResponse</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">error</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// Get the context</span></span>
<span class="line"><span style="color:#A6ACCD;">  ctx </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> sdk</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">UnwrapSDKContext</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">goCtx</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// Create variable of type Recipe</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> recipe </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> types</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Recipe</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">     Creator</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> msg</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Creator</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">     Dish</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> msg</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Dish</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">     Ingredients</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> msg</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Ingredients</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// Add a recipe to the store and get back the ID</span></span>
<span class="line"><span style="color:#A6ACCD;">  id </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> k</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AppendRecipe</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> recipe</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// Return the ID of the recipe</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">types</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">MsgCreateRecipeResponse</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">Id</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> id</span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>You will see errors in your text editor, which we will resolve in the next step.</p><h2 id="keepers" tabindex="-1">🔁 Keepers <a class="header-anchor" href="#keepers" aria-label="Permalink to &quot;🔁 Keepers {#keepers}&quot;">​</a></h2><h3 id="define-recipe-and-appendrecipe" tabindex="-1">📗 Define <code>Recipe</code> type and <code>AppendRecipe</code> keeper method <a class="header-anchor" href="#define-recipe-and-appendrecipe" aria-label="Permalink to &quot;📗 Define \`Recipe\` type and \`AppendRecipe\` keeper method {#define-recipe-and-appendrecipe}&quot;">​</a></h3><p>Create a file <code>recipes/proto/recipes/recipes/recipe.proto</code> and define the <code>Recipe</code> message:</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">syntax </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">proto3</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">package</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">recipes</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">recipes</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">option go_package </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">recipes/x/recipes/types</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">message Recipe </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">string</span><span style="color:#A6ACCD;"> creator </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">uint64</span><span style="color:#A6ACCD;"> id </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">string</span><span style="color:#A6ACCD;"> dish </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">string</span><span style="color:#A6ACCD;"> ingredients </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="define-keeper-methods" tabindex="-1">📘 Define keeper methods <a class="header-anchor" href="#define-keeper-methods" aria-label="Permalink to &quot;📘 Define keeper methods {#define-keeper-methods}&quot;">​</a></h3><p>Now you’ll define your <code>AppendRecipe</code> keeper method.</p><p>Create the <code>recipes/x/recipes/keeper/recipe.go</code> file. The <code>AppendRecipe</code> function is a placeholder to brainstorm how to implement it:</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">package</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">keeper</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">encoding/binary</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">cosmossdk.io/store/prefix</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">github.com/cosmos/cosmos-sdk/runtime</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  sdk </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">github.com/cosmos/cosmos-sdk/types</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">recipes/x/recipes/types</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// func (k Keeper) AppendRecipe() uint64 {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//    count := k.GetRecipeCount()</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//    store.Set()</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//    k.SetRecipeCount()</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//    return count</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// }</span></span></code></pre></div><p>Add these prefixes to the <code>recipes/x/recipes/types/keys.go</code> file in the <code>const</code> and add a comment for your reference:</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">//...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// Keep track of the index of recipes  </span></span>
<span class="line"><span style="color:#A6ACCD;">  RecipeKey      </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Recipe-value-</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  RecipeCountKey </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Recipe-count-</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">)</span></span></code></pre></div><p>Next, implement <code>GetRecipeCount</code> in the <code>recipes/x/recipes/keeper/recipe.go</code> file:</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">k Keeper</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">GetRecipeCount</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ctx sdk</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Context</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">uint64</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// Get the store using storeKey (which is &quot;recipes&quot;) and RecipeCountKey (which is &quot;Recipe-count-&quot;)</span></span>
<span class="line"><span style="color:#A6ACCD;">  storeAdapter </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> runtime</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">KVStoreAdapter</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">k</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">storeService</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">OpenKVStore</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">  store </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> prefix</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">NewStore</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">storeAdapter</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[]</span><span style="color:#82AAFF;">byte</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">types</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">RecipeCountKey</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// Convert the RecipeCountKey to bytes</span></span>
<span class="line"><span style="color:#A6ACCD;">  byteKey </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[]</span><span style="color:#82AAFF;">byte</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">types</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">RecipeCountKey</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// Get the value of the count</span></span>
<span class="line"><span style="color:#A6ACCD;">  bz </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> store</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Get</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">byteKey</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// Return zero if the count value is not found (for example, it&#39;s the first recipe)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> bz </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// Convert the count into a uint64</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> binary</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">BigEndian</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Uint64</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">bz</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>And then <code>SetRecipeCount</code>:</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">k Keeper</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SetRecipeCount</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ctx sdk</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Context</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> count </span><span style="color:#C792EA;">uint64</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// Get the store using storeKey (which is &quot;recipes&quot;) and RecipeCountKey (which is &quot;Recipe-count-&quot;)</span></span>
<span class="line"><span style="color:#A6ACCD;">  storeAdapter </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> runtime</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">KVStoreAdapter</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">k</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">storeService</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">OpenKVStore</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">  store </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> prefix</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">NewStore</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">storeAdapter</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[]</span><span style="color:#82AAFF;">byte</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">types</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">RecipeCountKey</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// Convert the RecipeCountKey to bytes</span></span>
<span class="line"><span style="color:#A6ACCD;">  byteKey </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[]</span><span style="color:#82AAFF;">byte</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">types</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">RecipeCountKey</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// Convert count from uint64 to string and get bytes</span></span>
<span class="line"><span style="color:#A6ACCD;">  bz </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">make</span><span style="color:#89DDFF;">([]</span><span style="color:#C792EA;">byte</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  binary</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">BigEndian</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">PutUint64</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">bz</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> count</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// Set the value of Recipe-count- to count</span></span>
<span class="line"><span style="color:#A6ACCD;">  store</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Set</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">byteKey</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> bz</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>Now you’re ready to implement the <code>AppendRecipe</code> function at the top of the file above <code>GetRecipeCount</code> and <code>SetRecipeCount</code>:</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">k Keeper</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> AppendRecipe </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ctx sdk</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Context</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> recipe types</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Recipe</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">uint64</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// Get the current number of recipes in the store</span></span>
<span class="line"><span style="color:#A6ACCD;">  count </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> k</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetRecipeCount</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// Assign an ID to the recipe based on the number of recipes in the store</span></span>
<span class="line"><span style="color:#A6ACCD;">  recipe</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Id </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> count</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// Get the store</span></span>
<span class="line"><span style="color:#A6ACCD;">  storeAdapter </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> runtime</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">KVStoreAdapter</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">k</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">storeService</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">OpenKVStore</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">  store </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> prefix</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">NewStore</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">storeAdapter</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[]</span><span style="color:#82AAFF;">byte</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">types</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">RecipeKey</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// Convert the recipe ID into bytes</span></span>
<span class="line"><span style="color:#A6ACCD;">  byteKey </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">make</span><span style="color:#89DDFF;">([]</span><span style="color:#C792EA;">byte</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  binary</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">BigEndian</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">PutUint64</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">byteKey</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> recipe</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Id</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// Marshal the recipe into bytes</span></span>
<span class="line"><span style="color:#A6ACCD;">  appendedValue </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> k</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">cdc</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">MustMarshal</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">recipe</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// Insert the recipe bytes using recipe ID as a key</span></span>
<span class="line"><span style="color:#A6ACCD;">  store</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Set</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">byteKey</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> appendedValue</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// Update the recipe count</span></span>
<span class="line"><span style="color:#A6ACCD;">  k</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">SetRecipeCount</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> count</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> count</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>Now you have implemented all the code required to create new recipes and store them on-chain. When a transaction that contains a message type <code>MsgCreateRecipe</code> is broadcast, the message is routed to the recipes module.</p><ul><li><code>k.CreateRecipe</code> calls <code>AppendRecipe</code>, which gets the recipe count, adds a recipe using the count as the ID, increments the count, and returns the ID</li></ul><h2 id="querying-recipes" tabindex="-1">🍽️ Querying recipes <a class="header-anchor" href="#querying-recipes" aria-label="Permalink to &quot;🍽️ Querying recipes {#querying-recipes}&quot;">​</a></h2><h3 id="query-recipes" tabindex="-1">🖥 Query recipes <a class="header-anchor" href="#query-recipes" aria-label="Permalink to &quot;🖥 Query recipes {#query-recipes}&quot;">​</a></h3><p>In order to query your recipes, scaffold a query with Ignite:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">ignite</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">scaffold</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">query</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">dishes</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--response</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">dish,ingredients</span></span></code></pre></div><p>A response on a successful scaffold will look like this:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">modify</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">proto/recipes/recipes/query.proto</span></span>
<span class="line"><span style="color:#FFCB6B;">modify</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">x/recipes/client/cli/query.go</span></span>
<span class="line"><span style="color:#FFCB6B;">create</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">x/recipes/client/cli/query_dishes.go</span></span>
<span class="line"><span style="color:#FFCB6B;">create</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">x/recipes/keeper/query_dishes.go</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">🎉</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Created</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">a</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">query</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#FFCB6B;">dishes</span><span style="color:#89DDFF;">\`</span><span style="color:#82AAFF;">.</span></span></code></pre></div><p>In the <code>proto/recipes/recipes/query.proto</code> file import:</p><div class="language-proto"><button title="Copy Code" class="copy"></button><span class="lang">proto</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&quot;recipes/recipes/recipe.proto&quot;</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>Add pagination to the recipe <em>request</em>:</p><div class="language-proto"><button title="Copy Code" class="copy"></button><span class="lang">proto</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">message</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">QueryDishesRequest</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// Adding pagination to request</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">cosmos.base.query.v1beta1.PageRequest</span><span style="color:#A6ACCD;"> pagination </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p>Add pagination to the recipe <em>response</em>:</p><div class="language-proto"><button title="Copy Code" class="copy"></button><span class="lang">proto</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">message</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">QueryDishesResponse</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// Returning a list of recipes</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">repeated</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Recipe</span><span style="color:#A6ACCD;"> Recipe </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// Adding pagination to response</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">cosmos.base.query.v1beta1.PageResponse</span><span style="color:#A6ACCD;"> pagination </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p>In order to implement recipe querying logic in <code>recipes/x/recipes/keeper/query_dishes.go</code>, delete the file contents and replace them with:</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">package</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">keeper</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">context</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">github.com/cosmos/cosmos-sdk/store/prefix</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  sdk </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">github.com/cosmos/cosmos-sdk/types</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">github.com/cosmos/cosmos-sdk/types/query</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">google.golang.org/grpc/codes</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">google.golang.org/grpc/status</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">recipes/x/recipes/types</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">k Keeper</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Dishes</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">c context</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Context</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> req </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">types</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">QueryDishesRequest</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(*</span><span style="color:#A6ACCD;">types</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">QueryDishesResponse</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">error</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// Throw an error if request is nil</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> req </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil,</span><span style="color:#A6ACCD;"> status</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Error</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">codes</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">InvalidArgument</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">invalid request</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// Define a variable that will store a list of recipes</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> dishes </span><span style="color:#89DDFF;">[]*</span><span style="color:#A6ACCD;">types</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Recipe</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// Get context with the information about the environment</span></span>
<span class="line"><span style="color:#A6ACCD;">  ctx </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> sdk</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">UnwrapSDKContext</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">c</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// Get the key-value module store using the store key (in our case store key is &quot;chain&quot;)</span></span>
<span class="line"><span style="color:#A6ACCD;">  storeAdapter </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> runtime</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">KVStoreAdapter</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">k</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">storeService</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">OpenKVStore</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// Get the part of the store that keeps recipes (using recipe key, which is &quot;Recipe-value-&quot;)</span></span>
<span class="line"><span style="color:#A6ACCD;">  recipeStore </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> prefix</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">NewStore</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">storeAdapter</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[]</span><span style="color:#82AAFF;">byte</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">types</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">RecipeKey</span><span style="color:#89DDFF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// Paginate the recipes store based on PageRequest</span></span>
<span class="line"><span style="color:#A6ACCD;">  pageRes</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> query</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Paginate</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">recipeStore</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> req</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Pagination</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">func(</span><span style="color:#A6ACCD;">key </span><span style="color:#89DDFF;">[]</span><span style="color:#C792EA;">byte</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> value </span><span style="color:#89DDFF;">[]</span><span style="color:#C792EA;">byte</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">error</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> dish types</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Recipe</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> k</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">cdc</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Unmarshal</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">dish</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> err</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    dishes </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">append</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">dishes</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">dish</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// Throw an error if pagination failed</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil,</span><span style="color:#A6ACCD;"> status</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Error</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">codes</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Internal</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Error</span><span style="color:#89DDFF;">())</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// Return a struct containing a list of recipes and pagination info</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">types</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">QueryDishesResponse</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">Recipe</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> dishes</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Pagination</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> pageRes</span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="running-recipes-rollup" tabindex="-1">👩‍🍳 Running the recipes rollup <a class="header-anchor" href="#running-recipes-rollup" aria-label="Permalink to &quot;👩‍🍳 Running the recipes rollup {#running-recipes-rollup}&quot;">​</a></h2><h3 id="run-celestia-light-node" tabindex="-1">✨ Run a Celestia light node <a class="header-anchor" href="#run-celestia-light-node" aria-label="Permalink to &quot;✨ Run a Celestia light node {#run-celestia-light-node}&quot;">​</a></h3><p>Follow instructions to install and start your Celestia Data Availability layer Light Node selecting the Arabica Devnet. You can find instructions to install and run the node <a href="https://docs.celestia.org/nodes/light-node" target="_blank" rel="noreferrer">here</a>.</p><p>After you have Go and Ignite CLI installed, and your Celestia Light Node running on your machine, you&#39;re ready to build, test, and launch your own sovereign rollup.</p><p>Be sure you have initialized your node before trying to start it. Your start command should look similar to:</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>It is recommended that you <a href="https://docs.celestia.org/nodes/light-node#keys-and-wallets" target="_blank" rel="noreferrer">create your own key</a> and fund it with a <a href="https://docs.celestia.org/nodes/light-node#testnet-tokens" target="_blank" rel="noreferrer">testnet tokens</a>.</p></div><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">celestia</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">light</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">start</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--core.ip</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">validator-1.celestia-arabica-11.com</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--p2p.network</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">arabica</span></span></code></pre></div><p>After you have Go and Ignite CLI installed, and your Celestia Light Node running on your machine, you&#39;re ready to build, test, and launch your own sovereign rollup.</p><h3 id="start-recipes-rollup" tabindex="-1">🗞️ Start the recipes rollup <a class="header-anchor" href="#start-recipes-rollup" aria-label="Permalink to &quot;🗞️ Start the recipes rollup {#start-recipes-rollup}&quot;">​</a></h3><p>We have a handy <code>init.sh</code> found in this repo <a href="https://github.com/rollkit/docs/tree/main/scripts/recipes" target="_blank" rel="noreferrer">here</a>.</p><p>We can copy it over to our directory with the following commands:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># From inside the \`recipes\` directory</span></span>
<span class="line"><span style="color:#FFCB6B;">wget</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://raw.githubusercontent.com/rollkit/docs/main/scripts/recipes/init.sh</span></span></code></pre></div><p>This copies over our <code>init.sh</code> script to initialize our Recipes Rollup.</p><p>You can view the contents of the script to see how we initialize the Recipes Rollup.</p><p>🟢 From your project working directory (<code>recipes/</code>), start the chain with:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">bash</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">init.sh</span></span></code></pre></div><p>With that, we have kickstarted our <code>recipesd</code> network!</p><p><img src="`+o+'" alt="recipe-start.gif"></p><p>Find <a href="https://explorer.modular.cloud/celestia-arabica/transactions" target="_blank" rel="noreferrer">your account address on an Arabica explorer to see your <code>PayForBlobs</code> transactions</a>.</p><p>Open another teminal instance. Now, create your first recipe in the command line by sending a transaction from <code>recipes-key</code>, when prompted, confirm the transaction by entering <code>y</code>:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">recipesd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tx</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">recipes</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">create-recipe</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">salad</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">spinach, mandarin oranges, sliced almonds, smoked gouda, citrus vinaigrette</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--from</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">recipes-key</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--keyring-backend</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--fees</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5000</span><span style="color:#C3E88D;">stake</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--chain-id</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">recipes</span></span></code></pre></div><p><img src="'+p+'" alt="recipes.gif"></p><h3 id="query-recipes-with-cli" tabindex="-1">⌨️ Query your recipes with the CLI <a class="header-anchor" href="#query-recipes-with-cli" aria-label="Permalink to &quot;⌨️ Query your recipes with the CLI {#query-recipes-with-cli}&quot;">​</a></h3><p>To query all of the on-chain recipes:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">recipesd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">q</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">recipes</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">dishes</span></span></code></pre></div><p><img src="'+l+'" alt="query.gif"></p><p>🎉 Congratulations, again! You have now successfully built a recipe book rollup.</p>',94),r=[c];function i(y,D,C,A,F,d){return a(),n("div",null,r)}const g=s(t,[["render",i]]);export{h as __pageData,g as default};
