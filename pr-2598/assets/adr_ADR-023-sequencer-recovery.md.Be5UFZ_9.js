import{_ as c,c as u,ag as d,b as n,w as o,af as s,j as a,a as t,B as h,o as r,G as l}from"./chunks/framework.LfVnamrF.js";const q=JSON.parse('{"title":"ADR 023: Sequencer Recovery & Liveness — Rafted Conductor vs 1‑Active/1‑Failover","description":"","frontmatter":{"head":[["meta",{"name":"og:title","content":"ADR 023: Sequencer Recovery & Liveness — Rafted Conductor vs 1‑Active/1‑Failover | Evolve"},{"name":"og:description","content":false}]]},"headers":[],"relativePath":"adr/ADR-023-sequencer-recovery.md","filePath":"adr/ADR-023-sequencer-recovery.md","lastUpdated":1756457056000}'),p={name:"adr/ADR-023-sequencer-recovery.md"};function g(f,e,m,b,v,A){const i=h("Mermaid");return r(),u("div",null,[e[3]||(e[3]=d('<h1 id="adr-023-sequencer-recovery-liveness-—-rafted-conductor-vs-1‐active-1‐failover" tabindex="-1">ADR 023: Sequencer Recovery &amp; Liveness — Rafted Conductor vs 1‑Active/1‑Failover <a class="header-anchor" href="#adr-023-sequencer-recovery-liveness-—-rafted-conductor-vs-1‐active-1‐failover" aria-label="Permalink to &quot;ADR 023: Sequencer Recovery &amp; Liveness — Rafted Conductor vs 1‑Active/1‑Failover&quot;">​</a></h1><h2 id="changelog" tabindex="-1">Changelog <a class="header-anchor" href="#changelog" aria-label="Permalink to &quot;Changelog&quot;">​</a></h2><ul><li>2025-08-21: Initial ADR authored; compared approaches and captured failover and escape‑hatch semantics.</li></ul><h2 id="context" tabindex="-1">Context <a class="header-anchor" href="#context" aria-label="Permalink to &quot;Context&quot;">​</a></h2><p>We need a robust, deterministic way to keep L2 block production live when the primary sequencer becomes unhealthy or unreachable, and to <strong>recover leadership</strong> without split‑brain or unsafe reorgs. The solution must integrate cleanly with <code>ev-node</code>, be observable, and support zero‑downtime upgrades. This ADR evaluates two designs for the <strong>control plane</strong> that governs which node is allowed to run the sequencer process.</p><h2 id="alternative-approaches" tabindex="-1">Alternative Approaches <a class="header-anchor" href="#alternative-approaches" aria-label="Permalink to &quot;Alternative Approaches&quot;">​</a></h2><p>Considered but not chosen for this iteration:</p><ul><li><strong>Many replicas, no coordination</strong>: high risk of <strong>simultaneous leaders</strong> (split‑brain) and soft‑confirmation reversals.</li><li><strong>Full BFT consensus among sequencers</strong>: heavier operational/engineering cost than needed; our fault model is crash‑fault tolerance with honest operators.</li><li><strong>Outsource ordering to a shared sequencer network</strong>: viable but introduces an external dependency and different SLOs; out of scope for the immediate milestone.</li><li><strong>Manual failover only</strong>: too slow and error‑prone for production SLOs.</li></ul><h2 id="decision" tabindex="-1">Decision <a class="header-anchor" href="#decision" aria-label="Permalink to &quot;Decision&quot;">​</a></h2><blockquote><p>We will operate <strong>1 active + 1 failover</strong> sequencer at all times, regardless of control plane. Two implementation options are approved:</p></blockquote><ul><li><p><strong>Design A — Rafted Conductor (CFT)</strong>: A sidecar <em>conductor</em> runs next to each <code>ev-node</code>. Conductors form a <strong>Raft</strong> cluster to elect a single leader and <strong>gate</strong> sequencing so only the Raft leader may produce blocks via the Admin Control API. Applicability: use Raft only when there are <strong>≥ 3 sequencers</strong> (prefer odd N: 3, 5, …). Do not use Raft for two-node 1‑active/1‑failover clusters; use Design B in that case. <em>Note:</em> OP Stack uses a very similar pattern for its sequencer; see <code>op-conductor</code> in References.</p></li><li><p><strong>Design B — 1‑Active / 1‑Failover (Lease/Lock)</strong>: One hot standby promotes itself when the active fails by acquiring a <strong>lease/lock</strong> (e.g., Kubernetes Lease or external KV). Strong <strong>fencing</strong> ensures the old leader cannot keep producing after lease loss.</p></li></ul><p><strong>Why both assume 1A/1F:</strong> Even with Raft, we intentionally keep <strong>n</strong> nodes on hot standby capable of immediate promotion; additional nodes may exist as <strong>read‑only</strong> or <strong>witness</strong> roles to strengthen quorum without enabling extra leaders.</p><p>Status of this decision: <strong>Proposed</strong> for implementation and test hardening.</p><h2 id="detailed-design" tabindex="-1">Detailed Design <a class="header-anchor" href="#detailed-design" aria-label="Permalink to &quot;Detailed Design&quot;">​</a></h2><h3 id="user-requirements" tabindex="-1">User requirements <a class="header-anchor" href="#user-requirements" aria-label="Permalink to &quot;User requirements&quot;">​</a></h3><ul><li><strong>No split‑brain</strong>: at most one sequencer is active.</li><li><strong>Deterministic recovery</strong>: new leader starts from a known <strong>unsafe head</strong>.</li><li><strong>Fast failover</strong>: p50 ≤ 15s, p95 ≤ 45s.</li><li><strong>Operational clarity</strong>: health metrics, leader identity, and explicit admin controls.</li><li><strong>Zero‑downtime upgrades</strong>: blue/green leadership transfer.</li></ul><h3 id="systems-affected" tabindex="-1">Systems affected <a class="header-anchor" href="#systems-affected" aria-label="Permalink to &quot;Systems affected&quot;">​</a></h3><ul><li><code>ev-node</code> (sequencer control hooks, health surface).</li><li>New sidecar(s): <strong>conductor</strong> (Design A) or <strong>lease‑manager</strong> (Design B).</li><li>RPC ingress (optional <strong>leader‑aware proxy</strong> to route sequencing endpoints only to the leader).</li><li>CI/CD &amp; SRE runbooks, dashboards, alerts.</li></ul><h3 id="new-changed-data-structures" tabindex="-1">New/changed data structures <a class="header-anchor" href="#new-changed-data-structures" aria-label="Permalink to &quot;New/changed data structures&quot;">​</a></h3><ul><li><strong>UnsafeHead</strong> record persisted by control plane: <code>(block_height, bloch_hash, timestamp)</code>.</li><li><strong>Design A (Raft)</strong>: replicated <strong>Raft log</strong> entries for <code>UnsafeHead</code>, <code>LeadershipTerm</code>, and optional <code>CommitMeta</code> (batch/DA pointers); periodic snapshots.</li><li><strong>Design B (Lease)</strong>: a single <strong>Lease</strong> record (Kubernetes Lease or external KV entry) plus a monotonic <strong>lease token</strong> for fencing.</li></ul><h3 id="admin-control-api-protobuf" tabindex="-1">Admin Control API (Protobuf) <a class="header-anchor" href="#admin-control-api-protobuf" aria-label="Permalink to &quot;Admin Control API (Protobuf)&quot;">​</a></h3><p>We introduce a separate, authenticated Admin Control API dedicated to sequencing control. This API is not exposed on the public RPC endpoint and binds to a distinct listener (port/interface, e.g., <code>:8443</code> on an internal network or loopback-only in single-host deployments). It is used exclusively by the conductor/lease-manager and by privileged operator automation for break-glass procedures.</p><p>Service overview:</p><ul><li>StartSequencer: Arms/starts sequencing subject to fencing (valid lease/term) and optionally pins to last persisted UnsafeHead.</li><li>StopSequencer: Hard stop with optional “force” semantics.</li><li>PrepareHandoff / CompleteHandoff: Explicit, auditable, two-phase, blue/green leadership transfer.</li><li>Health / Status: Health probes and machine-readable node + leader state.</li></ul><p>Endpoint separation:</p><ul><li>Public JSON-RPC and P2P endpoints remain unchanged.</li><li>Admin Control API is out-of-band and must not be routed through public ingress. It sits behind mTLS and strict network policy.</li></ul><p>The protobuf file is located in <code>proto/evnode/admin/v1/control.proto</code>.</p><p>Error semantics:</p><ul><li>PERMISSION_DENIED: AuthN/AuthZ failure, missing or invalid mTLS identity.</li><li>FAILED_PRECONDITION: Missing/expired lease or fencing violation; handoff ticket invalid.</li><li>ABORTED: Lost leadership mid-flight; TOCTOU fencing triggered self-stop.</li><li>ALREADY_EXISTS: Start requested but sequencer already active with same term.</li><li>UNAVAILABLE: Local dependencies not ready (DA client, exec engine).</li></ul><h3 id="efficiency-considerations" tabindex="-1">Efficiency considerations <a class="header-anchor" href="#efficiency-considerations" aria-label="Permalink to &quot;Efficiency considerations&quot;">​</a></h3><ul><li><strong>Design A:</strong> Raft heartbeats and snapshotting add small steady‑state overhead; no impact on throughput when healthy.</li><li><strong>Design B:</strong> Lease renewals are lightweight; performance dominated by <code>ev-node</code> itself.</li></ul><h3 id="expected-access-patterns" tabindex="-1">Expected access patterns <a class="header-anchor" href="#expected-access-patterns" aria-label="Permalink to &quot;Expected access patterns&quot;">​</a></h3><ul><li>Reads (RPC, state) should work on all nodes; <strong>writes/sequence endpoints</strong> only on the active leader. If a leader‑aware proxy is deployed, it enforces this automatically.</li></ul><h3 id="logging-monitoring-observability" tabindex="-1">Logging/Monitoring/Observability <a class="header-anchor" href="#logging-monitoring-observability" aria-label="Permalink to &quot;Logging/Monitoring/Observability&quot;">​</a></h3><ul><li>Metrics: <code>leader_id</code>, <code>raft_term</code> (A), <code>lease_owner</code> (B), <code>unsafe_head_advance</code>, <code>peer_count</code>, <code>rpc_error_rate</code>, <code>da_publish_latency</code>, <code>backlog</code>, <code>leader_election_epoch</code>, <code>leader_election_leader_last_seen_ts</code>, <code>leader_election_heartbeat_timeout_total</code>, <code>leader_election_leader_uptime_ms</code>.</li><li>Alerts: no unsafe advance &gt; 3× block time; unexpected leader churn; lease lost but sequencer still active (fencing breach).</li><li>Logs: audit all <strong>Start/Stop</strong> decisions and override operations.</li></ul><h2 id="diagrams" tabindex="-1">Diagrams <a class="header-anchor" href="#diagrams" aria-label="Permalink to &quot;Diagrams&quot;">​</a></h2><p>This section illustrates the nominal handoff, crash handover, and node join flows. Diagrams use Mermaid for clarity.</p><h3 id="planned-leadership-handoff-prepare-→-complete" tabindex="-1">Planned Leadership Handoff (Prepare → Complete) <a class="header-anchor" href="#planned-leadership-handoff-prepare-→-complete" aria-label="Permalink to &quot;Planned Leadership Handoff (Prepare → Complete)&quot;">​</a></h3>',38)),(r(),n(s,null,{default:o(()=>[l(i,{id:"mermaid-284",class:"mermaid",graph:"sequenceDiagram%0A%20%20%20%20autonumber%0A%20%20%20%20participant%20Op%20as%20Operator%2FAutomation%0A%20%20%20%20participant%20L%20as%20Leader%20Node%20(A)%0A%20%20%20%20participant%20CA%20as%20Conductor%20A%0A%20%20%20%20participant%20F%20as%20Target%20Node%20(B)%0A%20%20%20%20participant%20CB%20as%20Conductor%20B%0A%0A%20%20%20%20Op-%3E%3ECA%3A%20PrepareHandoff(lease_token%2C%20target_id%3DB)%0A%20%20%20%20CA-%3E%3EL%3A%20Quiesce%20sequencing%2C%20persist%20UnsafeHead%0A%20%20%20%20L--%3E%3ECA%3A%20Ack%20ready%2C%20return%20UnsafeHead%2C%20term%0A%20%20%20%20CA--%3E%3EOp%3A%20handoff_ticket(term%2C%20UnsafeHead%2C%20target%3DB)%0A%0A%20%20%20%20note%20over%20L%2CF%3A%20Ticket%20binds%20term%20%2B%20UnsafeHead%20%2B%20target_id%0A%0A%20%20%20%20Op-%3E%3ECB%3A%20Deliver%20handoff_ticket%20to%20target%20(B)%0A%20%20%20%20CB-%3E%3EF%3A%20CompleteHandoff(handoff_ticket)%0A%20%20%20%20CB-%3E%3EF%3A%20StartSequencer(from_unsafe_head%3Dtrue%2C%20lease_token')%0A%20%20%20%20F--%3E%3ECB%3A%20activated%3Dtrue%2C%20term%2C%20unsafe%0A%20%20%20%20CA-%3E%3EL%3A%20StopSequencer(force%3Dfalse)%0A"})]),fallback:o(()=>e[0]||(e[0]=[t(" Loading... ")])),_:1})),e[4]||(e[4]=a("p",null,"Key properties:",-1)),e[5]||(e[5]=a("ul",null,[a("li",null,"Ticket is audience-bound (target_id) and term-bound; replay-safe."),a("li",null,[t("New leader must resume from the provided "),a("code",null,"UnsafeHead"),t(" to ensure continuity.")]),a("li",null,"Old leader performs orderly stop after the new leader activates.")],-1)),e[6]||(e[6]=a("h3",{id:"crash-handover-leader-loss",tabindex:"-1"},[t("Crash Handover (Leader loss) "),a("a",{class:"header-anchor",href:"#crash-handover-leader-loss","aria-label":'Permalink to "Crash Handover (Leader loss)"'},"​")],-1)),(r(),n(s,null,{default:o(()=>[l(i,{id:"mermaid-308",class:"mermaid",graph:"sequenceDiagram%0A%20%20%20%20autonumber%0A%20%20%20%20participant%20A%20as%20Old%20Leader%20(A)%0A%20%20%20%20participant%20CP%20as%20Control%20Plane%20(Raft%2FLease)%0A%20%20%20%20participant%20B%20as%20Candidate%20Node%20(B)%0A%0A%20%20%20%20A-x%20CP%3A%20Heartbeats%2Flease%20renewals%20stop%0A%20%20%20%20CP-%3E%3ECP%3A%20Term%2B%2B%20(Raft)%20or%20Lease%20expires%0A%20%20%20%20B-%3E%3ECP%3A%20Campaign%20%2F%20Acquire%20Lease%0A%20%20%20%20CP--%3E%3EB%3A%20Leadership%20granted%20(term%2Fepoch)%2C%20mint%20token%0A%20%20%20%20B-%3E%3EB%3A%20Eligibility%20gate%20checks%20(sync%2C%20DA%2Fexec%20ready)%0A%20%20%20%20alt%20Behind%20or%20cannot%20advance%0A%20%20%20%20%20%20%20%20B--%3E%3ECP%3A%20Decline%20leadership%2C%20remain%20follower%0A%20%20%20%20else%20Eligible%0A%20%20%20%20%20%20%20%20B-%3E%3EB%3A%20StartSequencer(from_unsafe_head%3Dtrue%2C%20lease_token)%0A%20%20%20%20%20%20%20%20B--%3E%3ECP%3A%20Becomes%20active%20leader%20for%20new%20term%0A%20%20%20%20end%0A"})]),fallback:o(()=>e[1]||(e[1]=[t(" Loading... ")])),_:1})),e[7]||(e[7]=a("p",null,"Notes:",-1)),e[8]||(e[8]=a("ul",null,[a("li",null,"If no candidate passes eligibility, control plane keeps searching or alerts; no split-brain occurs."),a("li",null,[a("code",null,"UnsafeHead"),t(" continuity is enforced by token/ticket claims or persisted state.")])],-1)),e[9]||(e[9]=a("h3",{id:"joining-node-flow-follower-by-default",tabindex:"-1"},[t("Joining Node Flow (Follower by default) "),a("a",{class:"header-anchor",href:"#joining-node-flow-follower-by-default","aria-label":'Permalink to "Joining Node Flow (Follower by default)"'},"​")],-1)),(r(),n(s,null,{default:o(()=>[l(i,{id:"mermaid-327",class:"mermaid",graph:"flowchart%20LR%0A%20%20%20%20J%5BNode%20joins%20cluster%5D%20--%3E%20D%5BDiscover%20term%20via%20Raft%2FLease%3B%20fetch%20UnsafeHead%5D%0A%20%20%20%20D%20--%3E%20G%7BWithin%20lag%20threshold%20and%5CnDA%2Fexec%20readiness%20met%3F%7D%0A%20%20%20%20G%20--%20No%20--%3E%20F%5BRemain%20follower%3B%20replicate%20state%3B%20no%20sequencing%5D%0A%20%20%20%20F%20--%3E%20O%5BObserve%20term%3B%20health%3B%20catch%20up%5D%0A%20%20%20%20G%20--%20Yes%20--%3E%20E%5BEligible%20for%20promotion%5D%0A%20%20%20%20E%20--%3E%20H%5BReceive%20handoff_ticket%20or%20acquire%20lease%5D%0A%20%20%20%20H%20--%3E%20S%5B%22StartSequencer(from_unsafe_head%3Dtrue)%22%5D%0A"})]),fallback:o(()=>e[2]||(e[2]=[t(" Loading... ")])),_:1})),e[10]||(e[10]=d('<p>Eligibility gate (No-Advance = No-Leader):</p><ul><li>Must be within configurable lag threshold (height/time) relative to <code>UnsafeHead</code> or cluster head.</li><li>DA client reachable and healthy; execution engine synced and ready.</li><li>Local error budget acceptable (no recent critical faults).</li><li>If any check fails, node remains a follower and is not allowed to assume leadership.</li></ul><h3 id="security-considerations" tabindex="-1">Security considerations <a class="header-anchor" href="#security-considerations" aria-label="Permalink to &quot;Security considerations&quot;">​</a></h3><ul><li>Lock down <strong>Admin RPC</strong> with mTLS + RBAC; only the sidecar/process account may call Start/Stop.</li><li>Implement <strong>fencing</strong>: leader periodically validates it still holds leadership/lease; otherwise self‑stops.</li><li>Break‑glass overrides must be gated behind separate credentials and produce auditable events.</li></ul><h3 id="privacy-considerations" tabindex="-1">Privacy considerations <a class="header-anchor" href="#privacy-considerations" aria-label="Permalink to &quot;Privacy considerations&quot;">​</a></h3><ul><li>None beyond existing node telemetry; no user data added.</li></ul><h3 id="testing-plan" tabindex="-1">Testing plan <a class="header-anchor" href="#testing-plan" aria-label="Permalink to &quot;Testing plan&quot;">​</a></h3><ul><li>Kill active sequencer → verify failover within SLO; assert <strong>no double leadership</strong>.</li><li>Partition tests: only Raft majority (A) or lease holder (B) may produce.</li><li>Blue/green: explicit leadership handoff; confirm unsafe head continuity.</li><li>Misconfigured standby → failover should <strong>refuse</strong>; alarms fire.</li><li>Long‑duration outage drills; confirm user‑facing status and catch‑up behavior.</li></ul><h3 id="change-breakdown" tabindex="-1">Change breakdown <a class="header-anchor" href="#change-breakdown" aria-label="Permalink to &quot;Change breakdown&quot;">​</a></h3><ul><li>Phase 1: Implement Admin RPC + health surface in <code>ev-node</code>; add sidecar skeletons.</li><li>Phase 2: Integrate Design A (Raft) in a 1 sequencer + 2 failover; build dashboards/runbooks.</li><li>Phase 3: Add Design B (Lease) profile for small/test clusters; share common health logic.</li><li>Phase 4: Game days and SLO validation; finalize SRE playbooks.</li></ul><h3 id="release-compatibility" tabindex="-1">Release/compatibility <a class="header-anchor" href="#release-compatibility" aria-label="Permalink to &quot;Release/compatibility&quot;">​</a></h3><ul><li><strong>Breaking release?</strong> No — Admin RPCs are additive.</li></ul><h2 id="status" tabindex="-1">Status <a class="header-anchor" href="#status" aria-label="Permalink to &quot;Status&quot;">​</a></h2><p>Proposed</p><h2 id="consequences" tabindex="-1">Consequences <a class="header-anchor" href="#consequences" aria-label="Permalink to &quot;Consequences&quot;">​</a></h2><h3 id="positive" tabindex="-1">Positive <a class="header-anchor" href="#positive" aria-label="Permalink to &quot;Positive&quot;">​</a></h3><ul><li>Clear, deterministic leadership with fencing; supports zero‑downtime upgrades.</li><li>Works with <code>ev-node</code> via a small, well‑defined Admin RPC.</li><li>Choice of control plane allows right‑sizing ops: Raft for prod; Lease for small/test.</li></ul><h3 id="negative" tabindex="-1">Negative <a class="header-anchor" href="#negative" aria-label="Permalink to &quot;Negative&quot;">​</a></h3><ul><li>Design A adds Raft operational overhead (quorum management, snapshots).</li><li>Design B has a smaller blast radius but does not generalize to N replicas; stricter reliance on correct fencing.</li><li>Additional components (sidecars, proxies) increase deployment surface.</li></ul><h3 id="neutral" tabindex="-1">Neutral <a class="header-anchor" href="#neutral" aria-label="Permalink to &quot;Neutral&quot;">​</a></h3><ul><li>Small steady‑state CPU/network overhead for heartbeats/leases; negligible compared to sequencing and DA posting.</li></ul><h2 id="references" tabindex="-1">References <a class="header-anchor" href="#references" aria-label="Permalink to &quot;References&quot;">​</a></h2><ul><li><p><strong>OP conductor</strong> (industry prior art; similar to Design A):</p><ul><li>Docs: <a href="https://docs.optimism.io/operators/chain-operators/tools/op-conductor" target="_blank" rel="noreferrer">https://docs.optimism.io/operators/chain-operators/tools/op-conductor</a></li><li>README: <a href="https://github.com/ethereum-optimism/optimism/blob/develop/op-conductor/README.md" target="_blank" rel="noreferrer">https://github.com/ethereum-optimism/optimism/blob/develop/op-conductor/README.md</a></li></ul></li><li><p><strong><code>ev-node</code></strong> (architecture, sequencing):</p><ul><li>Repo: <a href="https://github.com/evstack/ev-node" target="_blank" rel="noreferrer">https://github.com/evstack/ev-node</a></li><li>Quick start: <a href="https://ev.xyz/guides/quick-start" target="_blank" rel="noreferrer">https://ev.xyz/guides/quick-start</a></li><li>Discussions/issues on sequencing API &amp; multi-sequencer behavior.</li></ul></li><li><p><strong>Lease-based leader election</strong>:</p><ul><li>Kubernetes Lease API: <a href="https://kubernetes.io/docs/concepts/architecture/leases/" target="_blank" rel="noreferrer">https://kubernetes.io/docs/concepts/architecture/leases/</a></li><li>client-go leader election helpers: <a href="https://pkg.go.dev/k8s.io/client-go/tools/leaderelection" target="_blank" rel="noreferrer">https://pkg.go.dev/k8s.io/client-go/tools/leaderelection</a></li></ul></li></ul>',23))])}const k=c(p,[["render",g]]);export{q as __pageData,k as default};
