import{_ as s,o as a,c as n,X as l}from"./chunks/framework.50b24f47.js";const A=JSON.parse('{"title":"GM World Rollup","description":"Build a sovereign rollup with Ignite CLI, Celestia, and Rollkit locally and on a testnet","frontmatter":{"description":"Build a sovereign rollup with Ignite CLI, Celestia, and Rollkit locally and on a testnet","head":[["meta",{"name":"og:title","content":"GM World Rollup | Rollkit"},{"name":"og:description","content":false}]]},"headers":[],"relativePath":"tutorials/gm-world.md","filePath":"tutorials/gm-world.md","lastUpdated":1714677032000}'),o={name:"tutorials/gm-world.md"},e=l(`<h1 id="gm-world-rollup" tabindex="-1">GM World Rollup <a class="header-anchor" href="#gm-world-rollup" aria-label="Permalink to &quot;GM World Rollup&quot;">‚Äã</a></h1><h3 id="introduction" tabindex="-1">üåûIntroduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;üåûIntroduction {#introduction}&quot;">‚Äã</a></h3><p>This tutorial will guide you through building a sovereign <code>gm-world</code> rollup (<code>gm</code> stands for &quot;good morning&quot;) using Rollkit. Unlike the <a href="https://rollkit.dev/tutorials/quick-start" target="_blank" rel="noreferrer">Quick Start Guide</a>, this tutorial provides a more practical approach to understanding sovereign rollup development.</p><p>We will cover:</p><ul><li>Building and configuring a Cosmos-SDK application-specific rollup blockchain.</li><li>Posting rollup data to a Data Availability (DA) network.</li><li>Executing transactions (the end goal).</li></ul><p>No prior understanding of the build process is required, just that it utilizes the <a href="https://github.com/cosmos/cosmos-sdk" target="_blank" rel="noreferrer">Cosmos SDK</a> for blockchain applications.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>This tutorial explores Rollkit, currently in Alpha. If you encounter bugs, please report them via a Github <a href="https://github.com/rollkit/docs/issues/new" target="_blank" rel="noreferrer">Issue ticket</a> or reach out in our <a href="https://t.me/rollkit" target="_blank" rel="noreferrer">Telegram group</a>.</p></div><h3 id="dependencies" tabindex="-1">üõ†Ô∏è Dependencies <a class="header-anchor" href="#dependencies" aria-label="Permalink to &quot;üõ†Ô∏è Dependencies {#dependencies}&quot;">‚Äã</a></h3><p>Rollkit uses the <a href="https://go.dev/dl/" target="_blank" rel="noreferrer">Go programming language</a>. Here&#39;s how to install it:</p><ul><li><strong>Linux or MacOS</strong>: Run the provided script:<div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">curl</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-sSL</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://raw.githubusercontent.com/rollkit/docs/main/scripts/install-go.sh</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">sh</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-s</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1.22</span><span style="color:#C3E88D;">.2</span></span></code></pre></div></li><li><strong>Windows</strong>: Download and execute the <a href="https://go.dev/dl/go1.22.2.windows-amd64.msi" target="_blank" rel="noreferrer">installer</a>.</li></ul><h3 id="running-local-da" tabindex="-1">üåê Running a Local DA Network <a class="header-anchor" href="#running-local-da" aria-label="Permalink to &quot;üåê Running a Local DA Network {#running-local-da}&quot;">‚Äã</a></h3><p>Learn to run a local DA network, designed for educational purposes, on your machine.</p><p>To set up a mock DA network node:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">curl</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-sSL</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://raw.githubusercontent.com/rollkit/docs/main/scripts/install-mock-da.sh</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">sh</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ff82679</span></span></code></pre></div><p>This script builds and runs the node, now listening on port <code>7980</code>.</p><h3 id="building-your-sovereign-rollup" tabindex="-1">üèóÔ∏è Building Your Sovereign Rollup <a class="header-anchor" href="#building-your-sovereign-rollup" aria-label="Permalink to &quot;üèóÔ∏è Building Your Sovereign Rollup {#building-your-sovereign-rollup}&quot;">‚Äã</a></h3><p>With the local DA network running, let‚Äôs prepare your rollup blockchain.</p><p>To make it simple we will donwload a repository with a <code>gm-world</code> rollup that has <code>init.sh</code> script that does all the setup for you.</p><p>Download and build a <code>gm-world</code> rollup with an interactive script in a new terminal:</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>In order to run it you need to have the jq command line tool installed. You can install it by running <code>sudo apt-get install jq</code> on Ubuntu or <code>brew install jq</code> on MacOS.</p></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If you get errors of <code>gmd</code> not found, you may need to add the <code>go/bin</code> directory to your PATH. You can do this by running <code>export PATH=$PATH:$HOME/go/bin</code> and then running the <code>init.sh</code> script manually again.</p></div><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">curl</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-sSL</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://raw.githubusercontent.com/rollkit/docs/main/scripts/install-gm-rollup.sh</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">sh</span></span></code></pre></div><h3 id="start-your-rollup" tabindex="-1">üöÄ Starting Your Rollup <a class="header-anchor" href="#start-your-rollup" aria-label="Permalink to &quot;üöÄ Starting Your Rollup {#start-your-rollup}&quot;">‚Äã</a></h3><p>Start the rollup, posting to the local DA network:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">gmd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">start</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--rollkit.aggregator</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--minimum-gas-prices=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">0.025stake</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--rollkit.da_address</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">http://localhost:7980</span></span></code></pre></div><p>Notice how we specified DA network address along with few other flags. Now you should see the logs of running node:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">12:21PM INF starting node with ABCI CometBFT in-process module=server</span></span>
<span class="line"><span style="color:#A6ACCD;">12:21PM INF starting node with Rollkit in-process module=server</span></span>
<span class="line"><span style="color:#A6ACCD;">12:21PM INF service start impl=multiAppConn module=proxy msg=&quot;Starting multiAppConn service&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">12:21PM INF service start connection=query impl=localClient module=abci-client msg=&quot;Starting localClient service&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">12:21PM INF service start connection=snapshot impl=localClient module=abci-client msg=&quot;Starting localClient service&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">12:21PM INF service start connection=mempool impl=localClient module=abci-client msg=&quot;Starting localClient service&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">12:21PM INF service start connection=consensus impl=localClient module=abci-client msg=&quot;Starting localClient service&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">12:21PM INF service start impl=EventBus module=events msg=&quot;Starting EventBus service&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">12:21PM INF service start impl=PubSub module=pubsub msg=&quot;Starting PubSub service&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">12:21PM INF Using default mempool ttl MempoolTTL=25 module=BlockManager</span></span>
<span class="line"><span style="color:#A6ACCD;">12:21PM INF service start impl=IndexerService module=txindex msg=&quot;Starting IndexerService service&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">12:21PM INF service start impl=RPC module=server msg=&quot;Starting RPC service&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">12:21PM INF service start impl=Node module=server msg=&quot;Starting Node service&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">12:21PM INF starting P2P client module=server</span></span>
<span class="line"><span style="color:#A6ACCD;">12:21PM INF serving HTTP listen address=127.0.0.1:26657 module=server</span></span>
<span class="line"><span style="color:#A6ACCD;">12:21PM INF listening on address=/ip4/127.0.0.1/tcp/26656/p2p/12D3KooWSicdPmMTLf9fJbSSHZc9UVP1CbNqKPpbYVbgxHvbhAUY module=p2p</span></span>
<span class="line"><span style="color:#A6ACCD;">12:21PM INF listening on address=/ip4/163.172.162.109/tcp/26656/p2p/12D3KooWSicdPmMTLf9fJbSSHZc9UVP1CbNqKPpbYVbgxHvbhAUY module=p2p</span></span>
<span class="line"><span style="color:#A6ACCD;">12:21PM INF no seed nodes - only listening for connections module=p2p</span></span>
<span class="line"><span style="color:#A6ACCD;">12:21PM INF working in aggregator mode block time=1000 module=server</span></span>
<span class="line"><span style="color:#A6ACCD;">12:21PM INF Creating and publishing block height=22 module=BlockManager</span></span>
<span class="line"><span style="color:#A6ACCD;">12:21PM INF starting gRPC server... address=127.0.0.1:9290 module=grpc-server</span></span>
<span class="line"><span style="color:#A6ACCD;">12:21PM INF finalized block block_app_hash=235D3710D61F347DBBBDD6FD63AA7687842D1EF9CB475C712856D7DA32F82F09 height=22 module=BlockManager num_txs_res=0 num_val_updates=0</span></span>
<span class="line"><span style="color:#A6ACCD;">12:21PM INF executed block app_hash=235D3710D61F347DBBBDD6FD63AA7687842D1EF9CB475C712856D7DA32F82F09 height=22 module=BlockManager</span></span>
<span class="line"><span style="color:#A6ACCD;">12:21PM INF indexed block events height=22 module=txindex</span></span>
<span class="line"><span style="color:#A6ACCD;">...</span></span></code></pre></div><p>Good work so far, we have a Rollup node, DA network node, now we can start submitting transactions.</p><h3 id="transactions" tabindex="-1">üí∏ Transactions <a class="header-anchor" href="#transactions" aria-label="Permalink to &quot;üí∏ Transactions {#transactions}&quot;">‚Äã</a></h3><p>First, list your keys:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">gmd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">keys</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">list</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--keyring-backend</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test</span></span></code></pre></div><p>You should see an output like the following</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">- address: gm18k57hn42ujcccyn0n5v7r6ydpacycn2wkt7uh9</span></span>
<span class="line"><span style="color:#A6ACCD;">  name: gm-key-2</span></span>
<span class="line"><span style="color:#A6ACCD;">  pubkey: &#39;{&quot;@type&quot;:&quot;/cosmos.crypto.secp256k1.PubKey&quot;,&quot;key&quot;:&quot;Al92dlOeLpuAiOUSIaJapkIveiwlhlEdz/O5CrniMdwH&quot;}&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">  type: local</span></span>
<span class="line"><span style="color:#A6ACCD;">- address: gm1e4fqspwdsy0dzkmzsdhkadfcrd0udngw0f88pw</span></span>
<span class="line"><span style="color:#A6ACCD;">  name: gm-key</span></span>
<span class="line"><span style="color:#A6ACCD;">  pubkey: &#39;{&quot;@type&quot;:&quot;/cosmos.crypto.secp256k1.PubKey&quot;,&quot;key&quot;:&quot;AwdsLY+2US2VV+rbyfi60GB4/Ir/FeTIkLJ3CWVhUF6b&quot;}&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">  type: local</span></span>
<span class="line"><span style="color:#A6ACCD;">- address: gm1vvl79phavqruppr6f5zy4ypxy7znshrqam48qy</span></span>
<span class="line"><span style="color:#A6ACCD;">  name: gm-relay</span></span>
<span class="line"><span style="color:#A6ACCD;">  pubkey: &#39;{&quot;@type&quot;:&quot;/cosmos.crypto.secp256k1.PubKey&quot;,&quot;key&quot;:&quot;AlnSEnBUv5GO86fMWe11qth1+R76g2e1lv8c1FWhLpqP&quot;}&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">  type: local</span></span></code></pre></div><p>For convenience we export two of our keys like this:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">export</span><span style="color:#A6ACCD;"> KEY1</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">gm18k57hn42ujcccyn0n5v7r6ydpacycn2wkt7uh9</span></span>
<span class="line"><span style="color:#C792EA;">export</span><span style="color:#A6ACCD;"> KEY2</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">gm1e4fqspwdsy0dzkmzsdhkadfcrd0udngw0f88pw</span></span></code></pre></div><p>Now let&#39;s submit a transaction that sends coins from one account to another (don&#39;t worry about all the flags, for now we just want to submit transaction from high perspective):</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">gmd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tx</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bank</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">send</span><span style="color:#A6ACCD;"> $KEY1 $KEY2 </span><span style="color:#F78C6C;">42069</span><span style="color:#C3E88D;">stake</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--keyring-backend</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--chain-id</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--fees</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5000</span><span style="color:#C3E88D;">stake</span></span></code></pre></div><p>You&#39;ll be prompted to accept the transaction:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight has-focused-lines"><code><span class="line"><span style="color:#A6ACCD;">auth_info:</span></span>
<span class="line"><span style="color:#A6ACCD;">  fee:</span></span>
<span class="line"><span style="color:#A6ACCD;">    amount: []</span></span>
<span class="line"><span style="color:#A6ACCD;">    gas_limit: &quot;200000&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    granter: &quot;&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    payer: &quot;&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  signer_infos: []</span></span>
<span class="line"><span style="color:#A6ACCD;">  tip: null</span></span>
<span class="line"><span style="color:#A6ACCD;">body:</span></span>
<span class="line"><span style="color:#A6ACCD;">  extension_options: []</span></span>
<span class="line"><span style="color:#A6ACCD;">  memo: &quot;&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  messages:</span></span>
<span class="line"><span style="color:#A6ACCD;">  - &#39;@type&#39;: /cosmos.bank.v1beta1.MsgSend</span></span>
<span class="line"><span style="color:#A6ACCD;">    amount:</span></span>
<span class="line"><span style="color:#A6ACCD;">    - amount: &quot;42069&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">      denom: stake</span></span>
<span class="line"><span style="color:#A6ACCD;">    from_address: gm18k57hn42ujcccyn0n5v7r6ydpacycn2wkt7uh9 </span></span>
<span class="line"><span style="color:#A6ACCD;">    to_address: gm1e4fqspwdsy0dzkmzsdhkadfcrd0udngw0f88pw</span></span>
<span class="line"><span style="color:#A6ACCD;">  non_critical_extension_options: []</span></span>
<span class="line"><span style="color:#A6ACCD;">  timeout_height: &quot;0&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">signatures: []</span></span>
<span class="line has-focus"><span style="color:#A6ACCD;">confirm transaction before signing and broadcasting [y/N]: </span></span></code></pre></div><p>Confirm and sign the transaction as prompted. now you see the transaction hash at the output:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">//...</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">txhash: 677CAF6C80B85ACEF6F9EC7906FB3CB021322AAC78B015FA07D5112F2F824BFF</span></span></code></pre></div><h3 id="balances" tabindex="-1">‚öñÔ∏è Checking Balances <a class="header-anchor" href="#balances" aria-label="Permalink to &quot;‚öñÔ∏è Checking Balances {#balances}&quot;">‚Äã</a></h3><p>Query balances after the transaction:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">gmd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">query</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bank</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">balances</span><span style="color:#A6ACCD;"> $KEY2</span></span></code></pre></div><p>The receiver‚Äôs balance should show an increase.</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight has-focused-lines"><code><span class="line has-focus"><span style="color:#A6ACCD;">balances: </span></span>
<span class="line has-focus"><span style="color:#A6ACCD;">- amount: &quot;10000000000000000000042069&quot; </span></span>
<span class="line"><span style="color:#A6ACCD;">  denom: stake</span></span>
<span class="line"><span style="color:#A6ACCD;">pagination:</span></span>
<span class="line"><span style="color:#A6ACCD;">  next_key: null</span></span>
<span class="line"><span style="color:#A6ACCD;">  total: &quot;0&quot;</span></span></code></pre></div><p>For the sender‚Äôs balance:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">gmd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">query</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bank</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">balances</span><span style="color:#A6ACCD;"> $KEY1</span></span></code></pre></div><p>Output:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight has-focused-lines"><code><span class="line has-focus"><span style="color:#A6ACCD;">balances: </span></span>
<span class="line has-focus"><span style="color:#A6ACCD;">- amount: &quot;9999999999999999999957931&quot; </span></span>
<span class="line"><span style="color:#A6ACCD;">  denom: stake</span></span>
<span class="line"><span style="color:#A6ACCD;">pagination:</span></span>
<span class="line"><span style="color:#A6ACCD;">  next_key: null</span></span>
<span class="line"><span style="color:#A6ACCD;">  total: &quot;0&quot;</span></span></code></pre></div><h3 id="üéâ-next-steps" tabindex="-1">üéâ Next steps <a class="header-anchor" href="#üéâ-next-steps" aria-label="Permalink to &quot;üéâ Next steps&quot;">‚Äã</a></h3><p>Congratulations! You&#39;ve built a local rollup that posts to a local DA network. So far so good, keep diving deeper if you like it. Good luck!</p>`,52),t=[e];function p(c,r,i,u,d,C){return a(),n("div",null,t)}const h=s(o,[["render",p]]);export{A as __pageData,h as default};
