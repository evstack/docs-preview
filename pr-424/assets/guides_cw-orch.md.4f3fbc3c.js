import{_ as s,o as a,c as n,X as o}from"./chunks/framework.a966a312.js";const A=JSON.parse('{"title":"Speed up your development with cw-orchestrator","description":"","frontmatter":{"head":[["meta",{"name":"og:title","content":"Speed up your development with cw-orchestrator | Rollkit"},{"name":"og:description","content":false}]]},"headers":[],"relativePath":"guides/cw-orch.md","filePath":"guides/cw-orch.md","lastUpdated":1721742586000}'),e={name:"guides/cw-orch.md"},l=o(`<h1 id="speed-up-your-development-with-cw-orchestrator" tabindex="-1">Speed up your development with cw-orchestrator <a class="header-anchor" href="#speed-up-your-development-with-cw-orchestrator" aria-label="Permalink to &quot;Speed up your development with cw-orchestrator&quot;">​</a></h1><h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h2><p>cw-orchestrator is the most advanced scripting, testing, and deployment framework for CosmWasm smart-contracts. It makes it easy to write cross-environment compatible code for <a href="https://github.com/CosmWasm/cw-multi-test" target="_blank" rel="noreferrer">cw-multi-test</a>, <a href="https://github.com/osmosis-labs/test-tube" target="_blank" rel="noreferrer">Test Tube</a>, <a href="https://github.com/cosmology-tech/starship" target="_blank" rel="noreferrer">Starship</a> (alpha), and live networks, significantly reducing code duplication and test-writing time.</p><p>Get ready to change the way you interact with contracts and simplify you smart-contracts journey. The following steps will allow you to integrate <code>cw-orch</code> and write clean code such as:</p><div class="language-rust"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">counter</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">upload</span><span style="color:#89DDFF;">()?;</span></span>
<span class="line"><span style="color:#A6ACCD;">counter</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">instantiate</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#FFCB6B;">InstantiateMsg</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> count</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">None</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">None</span><span style="color:#89DDFF;">)?;</span></span>
<span class="line"><span style="color:#A6ACCD;">counter</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">increment</span><span style="color:#89DDFF;">()?;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> count </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> counter</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get_count</span><span style="color:#89DDFF;">()?;</span></span>
<span class="line"><span style="color:#82AAFF;">assert_eq!</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span></code></pre></div><p>In this quick-start guide, we will review the necessary steps in order to integrate <a href="https://github.com/AbstractSDK/cw-orchestrator" target="_blank" rel="noreferrer"><code>cw-orch</code></a> into a simple contract crate. <a href="#integration-in-a-workspace">We review integration of rust-workspaces (multiple contracts) at the end of this page</a>.</p><blockquote><p><strong>NOTE</strong>: <em>Quicker than the quick start</em></p><p>If you&#39;re moving quicker than everybody else, we suggest looking at <a href="https://github.com/AbstractSDK/cw-orch-counter-example/compare/e0a54b074ca1a894bb6e58276944cf2013d152f2..main" target="_blank">a before-after review of this example integration</a>. This will help you catch the additions you need to make to your contract to be able to interact with it using cw-orchestrator.</p></blockquote><blockquote><p><strong>NOTE</strong>: If you want to go more in depth, <a href="https://orchestrator.abstract.money/" target="_blank" rel="noreferrer">browse the full <code>cw-orch</code> documentation</a>.</p></blockquote><h2 id="summary" tabindex="-1">Summary <a class="header-anchor" href="#summary" aria-label="Permalink to &quot;Summary&quot;">​</a></h2><ul><li><a href="#speed-up-your-development-with-cw-orchestrator">Speed up your development with cw-orchestrator</a><ul><li><a href="#introduction">Introduction</a></li><li><a href="#summary">Summary</a></li><li><a href="#single-contract-integration">Single Contract Integration</a><ul><li><a href="#adding-cw-orch-to-your-cargotoml-file">Adding <code>cw-orch</code> to your <code>Cargo.toml</code> file</a></li><li><a href="#creating-an-interface">Creating an Interface</a></li><li><a href="#interaction-helpers">Interaction helpers</a></li><li><a href="#using-the-integration">Using the integration</a></li></ul></li><li><a href="#integration-in-a-workspace">Integration in a workspace</a><ul><li><a href="#handling-dependencies-and-features">Handling dependencies and features</a></li><li><a href="#creating-an-interface-crate">Creating an interface crate</a></li><li><a href="#integrating-single-contracts">Integrating single contracts</a></li></ul></li><li><a href="#more-examples-and-scripts">More examples and scripts</a></li></ul></li></ul><h2 id="single-contract-integration" tabindex="-1">Single Contract Integration <a class="header-anchor" href="#single-contract-integration" aria-label="Permalink to &quot;Single Contract Integration&quot;">​</a></h2><p>Throughout this example, we will be using <code>cw-orch</code> to interact with a simple counter contract. All the steps below apply to any smart contract, no matter the complexity.</p><h3 id="adding-cw-orch-to-your-cargo-toml-file" tabindex="-1">Adding <code>cw-orch</code> to your <code>Cargo.toml</code> file <a class="header-anchor" href="#adding-cw-orch-to-your-cargo-toml-file" aria-label="Permalink to &quot;Adding \`cw-orch\` to your \`Cargo.toml\` file&quot;">​</a></h3><p>To use cw-orchestrator, you need to add <code>cw-orch</code> to your contract&#39;s TOML file. Run the command below in your contract&#39;s directory:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">cargo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cw-orch</span></span></code></pre></div><p>Alternatively, you can add it manually in your <code>Cargo.toml</code> file as shown below:</p><div class="language-toml"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">dependencies</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">cw-orch </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">version </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">0.21.2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># Latest version at time of writing</span></span></code></pre></div><h3 id="creating-an-interface" tabindex="-1">Creating an Interface <a class="header-anchor" href="#creating-an-interface" aria-label="Permalink to &quot;Creating an Interface&quot;">​</a></h3><p>When using a single contract, we advise creating an <code>interface.rs</code> file inside your contract&#39;s directory. You then need to add this module to your <code>lib.rs</code> file. In order for this interface code to not land in your WASM smart-contracts you need to target-flag it like so:</p><div class="language-rust"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">#[</span><span style="color:#A6ACCD;">cfg</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">not</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">target_arch </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wasm32</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">))]</span></span>
<span class="line"><span style="color:#C792EA;">mod</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">interface</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>Then, inside that <code>interface.rs</code> file, you can define the interface for your contract:</p><div class="language-rust"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> cw_orch</span><span style="color:#89DDFF;">::{</span><span style="color:#FFCB6B;">interface</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> prelude</span><span style="color:#89DDFF;">::*};</span></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#F78C6C;">crate</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">msg</span><span style="color:#89DDFF;">::{</span><span style="color:#FFCB6B;">ExecuteMsg</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> InstantiateMsg</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> MigrateMsg</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> QueryMsg</span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F78C6C;">pub</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> CONTRACT_ID</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#FFCB6B;">str</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">counter_contract</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">#[</span><span style="color:#A6ACCD;">interface</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">InstantiateMsg</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ExecuteMsg</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">QueryMsg</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MigrateMsg</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> id </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> CONTRACT_ID</span><span style="color:#89DDFF;">)]</span></span>
<span class="line"><span style="color:#F78C6C;">pub</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CounterContract</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">impl</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Chain</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CwEnv</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Uploadable</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CounterContract</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Chain</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /// Return the path to the wasm file corresponding to the contract</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">fn</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">wasm</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WasmPath</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">artifacts_dir_from_workspace!</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">find_wasm_path</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">counter_contract</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">unwrap</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /// Returns a CosmWasm contract wrapper</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">fn</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">wrapper</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Box</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F78C6C;">dyn</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MockContract</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Empty</span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">Box</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">new</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">ContractWrapper</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">new_with_empty</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#F78C6C;">crate</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">contract</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">execute</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#F78C6C;">crate</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">contract</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">instantiate</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#F78C6C;">crate</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">contract</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">query</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">with_migrate</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">crate</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">contract</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">migrate</span><span style="color:#89DDFF;">),</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>Learn more about the content of the interface creation specifics in the <a href="https://orchestrator.abstract.money/contracts/interfaces.html#creating-an-interface" target="_blank" rel="noreferrer"><code>cw-orch</code> documentation</a></p><blockquote><p><strong>NOTE</strong>: It can be useful to re-export this struct to simplify usage (in <code>lib.rs</code>):</p><div class="language-rust"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">#[</span><span style="color:#A6ACCD;">cfg</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">not</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">target_arch </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wasm32</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">))]</span></span>
<span class="line"><span style="color:#F78C6C;">pub</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#F78C6C;">crate</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">interface</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">CounterContract</span><span style="color:#89DDFF;">;</span></span></code></pre></div></blockquote><h3 id="interaction-helpers" tabindex="-1">Interaction helpers <a class="header-anchor" href="#interaction-helpers" aria-label="Permalink to &quot;Interaction helpers&quot;">​</a></h3><p>cw-orchestrator provides a additional macros that simplify contract calls and queries. The macro implements functions on the interface for each variant of the contract&#39;s <code>ExecuteMsg</code> and <code>QueryMsg</code>.</p><p>Enabling this functionality is very straightforward. Find your <code>ExecuteMsg</code> and <code>QueryMsg</code> definitions (in <code>msg.rs</code> in our example) and add the <code>ExecuteFns</code> and <code>QueryFns</code> derive macros to them like below:</p><div class="language-rust"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">#[</span><span style="color:#A6ACCD;">cw_serde</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">#[</span><span style="color:#A6ACCD;">derive</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">cw_orch</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">ExecuteFns</span><span style="color:#89DDFF;">)]</span><span style="color:#676E95;font-style:italic;"> // Function generation</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/// Execute methods for counter</span></span>
<span class="line"><span style="color:#F78C6C;">pub</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">enum</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ExecuteMsg</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /// Increment count by one</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">Increment</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /// Reset count</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">Reset</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        /// Count value after reset</span></span>
<span class="line"><span style="color:#A6ACCD;">        count</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">i32</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">#[</span><span style="color:#A6ACCD;">cw_serde</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">#[</span><span style="color:#A6ACCD;">derive</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">cw_orch</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">QueryFns</span><span style="color:#89DDFF;">)]</span><span style="color:#676E95;font-style:italic;"> // Function generation</span></span>
<span class="line"><span style="color:#89DDFF;">#[</span><span style="color:#A6ACCD;">derive</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">QueryResponses</span><span style="color:#89DDFF;">)]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/// Query methods for counter</span></span>
<span class="line"><span style="color:#F78C6C;">pub</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">enum</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">QueryMsg</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /// GetCount returns the current count as a json-encoded number</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">#[</span><span style="color:#A6ACCD;">returns</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">GetCountResponse</span><span style="color:#89DDFF;">)]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">GetCount</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Custom response for the query</span></span>
<span class="line"><span style="color:#89DDFF;">#[</span><span style="color:#A6ACCD;">cw_serde</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/// Response from get_count query</span></span>
<span class="line"><span style="color:#F78C6C;">pub</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">GetCountResponse</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /// Current count in the state</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">pub</span><span style="color:#A6ACCD;"> count</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">i32</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>Find out more about the interaction helpers in the <a href="https://orchestrator.abstract.money/contracts/interfaces.html#entry-point-function-generation" target="_blank" rel="noreferrer"><code>cw-orch</code> documentation</a></p><blockquote><p><strong>NOTE</strong>: Again, it can be useful to re-export these generated traits to simplify usage (in <code>lib.rs</code>):</p><div class="language-rust"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">pub</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#F78C6C;">crate</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">msg</span><span style="color:#89DDFF;">::{</span><span style="color:#FFCB6B;">ExecuteMsgFns </span><span style="color:#F78C6C;">as</span><span style="color:#FFCB6B;"> CounterExecuteMsgFns</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> QueryMsgFns </span><span style="color:#F78C6C;">as</span><span style="color:#FFCB6B;"> CounterQueryMsgFns</span><span style="color:#89DDFF;">};</span></span></code></pre></div></blockquote><h3 id="using-the-integration" tabindex="-1">Using the integration <a class="header-anchor" href="#using-the-integration" aria-label="Permalink to &quot;Using the integration&quot;">​</a></h3><p>Now that all the setup is done, you can use your contract in tests, integration-tests or scripts.</p><p>Start by importing your crate in <code>[dependencies]</code> or <code>[dev-dependencies]</code>:</p><div class="language-toml"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">counter-contract </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> path </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">../counter-contract</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span></code></pre></div><p>You can now use:</p><div class="language-rust"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> counter_contract</span><span style="color:#89DDFF;">::{</span></span>
<span class="line"><span style="color:#FFCB6B;">    msg</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">InstantiateMsg</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> CounterContract</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> CounterExecuteMsgFns</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> CounterQueryMsgFns</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> cw_orch</span><span style="color:#89DDFF;">::{</span><span style="color:#FFCB6B;">anyhow</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> prelude</span><span style="color:#89DDFF;">::*,</span><span style="color:#FFCB6B;"> tokio</span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> tokio</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">runtime</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Runtime</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> LOCAL_MNEMONIC</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#FFCB6B;">str</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">clip hire initial neck maid actor venue client foam budget lock catalog sweet steak waste crater broccoli pipe steak sister coyote moment obvious choose</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">pub</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">fn</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">anyhow</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">Result</span><span style="color:#89DDFF;">&lt;()&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">std</span><span style="color:#89DDFF;">::</span><span style="color:#FFCB6B;">env</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">set_var</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">LOCAL_MNEMONIC</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> LOCAL_MNEMONIC</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">dotenv</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">dotenv</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">ok</span><span style="color:#89DDFF;">();</span><span style="color:#676E95;font-style:italic;"> // Used to load the \`.env\` file if any</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">pretty_env_logger</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">init</span><span style="color:#89DDFF;">();</span><span style="color:#676E95;font-style:italic;"> // Used to log contract and chain interactions</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> rt </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Runtime</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">new</span><span style="color:#89DDFF;">()?;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> network </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">networks</span><span style="color:#89DDFF;">::</span><span style="color:#A6ACCD;">LOCAL_JUNO</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> chain </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DaemonBuilder</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">default</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">handle</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">rt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">handle</span><span style="color:#89DDFF;">())</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">chain</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">network</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">build</span><span style="color:#89DDFF;">()?;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> counter </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CounterContract</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">new</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">chain</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    counter</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">upload</span><span style="color:#89DDFF;">()?;</span></span>
<span class="line"><span style="color:#A6ACCD;">    counter</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">instantiate</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#FFCB6B;">InstantiateMsg</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> count</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">None</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">None</span><span style="color:#89DDFF;">)?;</span></span>
<span class="line"><span style="color:#A6ACCD;">    counter</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">increment</span><span style="color:#89DDFF;">()?;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> count </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> counter</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get_count</span><span style="color:#89DDFF;">()?;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">assert_eq!</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">Ok</span><span style="color:#89DDFF;">(())</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="integration-in-a-workspace" tabindex="-1">Integration in a workspace <a class="header-anchor" href="#integration-in-a-workspace" aria-label="Permalink to &quot;Integration in a workspace&quot;">​</a></h2><p>In this paragraph, we will use the <code>cw-plus</code> repository as an example. You can review:</p><ul><li><a href="https://github.com/AbstractSDK/cw-plus" target="_blank">The full integration code</a> with <code>cw-orch</code> added</li><li><a href="https://github.com/cosmwasm/cw-plus/compare/main...abstractsdk:main" target="_blank">The complete diff</a> that shows you all integration spots (if you want to go fast)</li></ul><h3 id="handling-dependencies-and-features" tabindex="-1">Handling dependencies and features <a class="header-anchor" href="#handling-dependencies-and-features" aria-label="Permalink to &quot;Handling dependencies and features&quot;">​</a></h3><p>When using workspaces, you need to add <code>cw-orch</code> to all crates that include <code>ExecuteMsg</code> and <code>QueryMsg</code> used in your contracts and derive the <code>ExecuteFns</code> and <code>QueryFns</code> on them.</p><p>Refer above to <a href="#interaction-helpers">Interaction helpers</a> for more details on how to do that.</p><p>For instance, for the <code>cw20_base</code> contract, you need to execute those 2 steps on the <code>cw20-base</code> contract (where the <code>QueryMsg</code> are defined) as well as on the <code>cw20</code> package (where the <code>ExecuteMsg</code> are defined).</p><h3 id="creating-an-interface-crate" tabindex="-1">Creating an interface crate <a class="header-anchor" href="#creating-an-interface-crate" aria-label="Permalink to &quot;Creating an interface crate&quot;">​</a></h3><p>When using a workspace, we advise you to create a new crate inside your workspace for defining your contract&#39;s interfaces. In order to do that, use:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">cargo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--lib</span></span>
<span class="line"><span style="color:#FFCB6B;">cargo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cw-orch</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--package</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">interface</span></span></code></pre></div><p>Add the interface package to your workspace <code>Cargo.toml</code> file</p><div class="language-toml"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">workspace</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">members </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">packages/*</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">contracts/*</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">interface</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span></span></code></pre></div><p>Inside this <code>interface</code> crate, we advise to integrate all your contracts 1 by 1 in separate files. Here is the structure of the <code>cw-plus</code> integration for reference:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">interface</span><span style="color:#A6ACCD;"> (interface </span><span style="color:#C3E88D;">collection</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#FFCB6B;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Cargo.toml</span></span>
<span class="line"><span style="color:#FFCB6B;">└──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">src</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cw1_subkeys.rs</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cw1_whitelist.rs</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cw20_base.rs</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">├──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cw20_ics20.rs</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">└──</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">..</span></span></code></pre></div><p>When importing your crates to get the messages types, you can use the following command in the interface folder.</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">cargo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cw20-base</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--path</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">../contracts/cw20-base/</span></span>
<span class="line"><span style="color:#FFCB6B;">cargo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cw20</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--path</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">../packages/cw20</span></span></code></pre></div><h3 id="integrating-single-contracts" tabindex="-1">Integrating single contracts <a class="header-anchor" href="#integrating-single-contracts" aria-label="Permalink to &quot;Integrating single contracts&quot;">​</a></h3><p>Now that you workspace is setup, you can <a href="#single-contract-integration">integrate with single contracts</a> using the above section</p><h2 id="more-examples-and-scripts" tabindex="-1">More examples and scripts <a class="header-anchor" href="#more-examples-and-scripts" aria-label="Permalink to &quot;More examples and scripts&quot;">​</a></h2><p>You can find more example interactions on the <code>counter-contract</code> example directly in the <code>cw-orchestrator</code> repo:</p><ul><li>Some examples <a href="https://github.com/AbstractSDK/cw-orchestrator/blob/main/contracts/counter/examples/deploy.rs" target="_blank">showcase interacting with live chains</a>.</li><li>Some other examples show <a href="https://github.com/AbstractSDK/cw-orchestrator/tree/main/contracts/counter/tests" target="_blank">how to use the library for testing your contracts</a>.</li></ul><blockquote><p><strong>FINAL ADVICE</strong>: Learn more and explore our <a href="https://orchestrator.abstract.money" target="blank">full <code>cw-orch</code> documentation !</a>.</p></blockquote>`,58),t=[l];function p(c,r,y,i,F,D){return a(),n("div",null,t)}const d=s(e,[["render",p]]);export{A as __pageData,d as default};
