import{_ as i,c as a,ag as n,o as e}from"./chunks/framework.BAhN6eAR.js";const g=JSON.parse('{"title":"ADR 023: Event-Driven Sync Service Architecture","description":"","frontmatter":{"head":[["meta",{"name":"og:title","content":"ADR 023: Event-Driven Sync Service Architecture | Evolve"},{"name":"og:description","content":false}]]},"headers":[],"relativePath":"adr/adr-023-event-driven-sync.md","filePath":"adr/adr-023-event-driven-sync.md","lastUpdated":1761919443000}'),t={name:"adr/adr-023-event-driven-sync.md"};function l(h,s,p,r,k,o){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="adr-023-event-driven-sync-service-architecture" tabindex="-1">ADR 023: Event-Driven Sync Service Architecture <a class="header-anchor" href="#adr-023-event-driven-sync-service-architecture" aria-label="Permalink to &quot;ADR 023: Event-Driven Sync Service Architecture&quot;">​</a></h1><h2 id="changelog" tabindex="-1">Changelog <a class="header-anchor" href="#changelog" aria-label="Permalink to &quot;Changelog&quot;">​</a></h2><ul><li>2025-10-31: Initial version documenting event-driven sync design</li></ul><h2 id="context" tabindex="-1">Context <a class="header-anchor" href="#context" aria-label="Permalink to &quot;Context&quot;">​</a></h2><p>The sync service is responsible for synchronizing blocks from two sources: the Data Availability (DA) layer and P2P gossip. Previously, the syncer used a polling-based approach where it would periodically check P2P stores for new data. This created several issues:</p><ol><li><strong>Tight Coupling</strong>: The syncer needed direct knowledge of P2P store internals, requiring it to poll and query stores directly</li><li><strong>Inefficient Resource Usage</strong>: Constant polling consumed CPU cycles even when no new data was available</li><li><strong>Complex Coordination</strong>: Managing the timing between DA retrieval and P2P polling required careful orchestration</li><li><strong>Latency</strong>: Polling intervals introduced artificial delays between when data became available and when it was processed</li></ol><p>The goal was to decouple the syncer from P2P stores while improving efficiency and reducing latency for block synchronization.</p><h2 id="alternative-approaches" tabindex="-1">Alternative Approaches <a class="header-anchor" href="#alternative-approaches" aria-label="Permalink to &quot;Alternative Approaches&quot;">​</a></h2><h3 id="direct-store-polling-previous-approach" tabindex="-1">Direct Store Polling (Previous Approach) <a class="header-anchor" href="#direct-store-polling-previous-approach" aria-label="Permalink to &quot;Direct Store Polling (Previous Approach)&quot;">​</a></h3><p>The original design had the syncer directly polling P2P stores on a timer:</p><ul><li><strong>Pros</strong>: Simple to understand, direct control over polling frequency</li><li><strong>Cons</strong>: Tight coupling, inefficient resource usage, artificial latency, complex coordination logic</li><li><strong>Rejected</strong>: While simpler initially, the tight coupling made the code harder to maintain and test</li></ul><h3 id="event-bus-architecture" tabindex="-1">Event Bus Architecture <a class="header-anchor" href="#event-bus-architecture" aria-label="Permalink to &quot;Event Bus Architecture&quot;">​</a></h3><p>Could have implemented a centralized event bus for all store events:</p><ul><li><strong>Pros</strong>: Maximum flexibility, could handle many event types, well-known pattern</li><li><strong>Cons</strong>: Over-engineered for our needs, added complexity and overhead</li><li><strong>Rejected</strong>: The notification system is simpler and sufficient for our use case</li></ul><h3 id="callback-based-approach" tabindex="-1">Callback-Based Approach <a class="header-anchor" href="#callback-based-approach" aria-label="Permalink to &quot;Callback-Based Approach&quot;">​</a></h3><p>Could have used callbacks passed to stores:</p><ul><li><strong>Pros</strong>: Direct communication, no intermediate components</li><li><strong>Cons</strong>: Tight coupling through callbacks, harder to test, callback hell</li><li><strong>Rejected</strong>: Would have created different coupling issues</li></ul><h2 id="decision" tabindex="-1">Decision <a class="header-anchor" href="#decision" aria-label="Permalink to &quot;Decision&quot;">​</a></h2><p>We implemented an <strong>event-driven architecture using a notification system</strong> that decouples P2P stores from the syncer:</p><ol><li><strong>Notifier Component</strong>: A publish-subscribe mechanism that propagates store write events</li><li><strong>Instrumented Stores</strong>: Wrap P2P stores to publish events on writes without modifying core store logic</li><li><strong>Subscription-Based Consumption</strong>: The syncer subscribes to store events and reacts when new data arrives</li><li><strong>Event-Triggered Processing</strong>: Instead of polling, the syncer fetches from P2P only when notified of new data</li></ol><p>This design follows an <strong>observer pattern</strong> where:</p><ul><li>P2P stores are the subjects (publish events)</li><li>The syncer is the observer (subscribes and reacts)</li><li>The notifier is the event channel (facilitates communication)</li></ul><h2 id="detailed-design" tabindex="-1">Detailed Design <a class="header-anchor" href="#detailed-design" aria-label="Permalink to &quot;Detailed Design&quot;">​</a></h2><h3 id="architecture-components" tabindex="-1">Architecture Components <a class="header-anchor" href="#architecture-components" aria-label="Permalink to &quot;Architecture Components&quot;">​</a></h3><h4 id="_1-notifier-system-pkg-sync-notifier" tabindex="-1">1. Notifier System (<code>pkg/sync/notifier/</code>) <a class="header-anchor" href="#_1-notifier-system-pkg-sync-notifier" aria-label="Permalink to &quot;1. Notifier System (\`pkg/sync/notifier/\`)&quot;">​</a></h4><p><strong>Notifier</strong>: Manages event publication and subscription</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Notifier</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    subscribers []</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Subscription</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mu          </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RWMutex</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Notifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Publish</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Notifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Subscription</span></span></code></pre></div><p><strong>Event Structure</strong>:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Event</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Type      </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EventType</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // Header or Data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Height    </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint64</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // Block height</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Hash      </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // Block/header hash</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Source    </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EventSource</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // P2P or Local</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Timestamp </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Time</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>Subscription</strong>: Delivers events to subscribers via buffered channel</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Subscription</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    C      </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">chan</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Event</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Buffered channel (100 events)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cancel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="_2-instrumented-store-pattern-pkg-sync-sync-service-go" tabindex="-1">2. Instrumented Store Pattern (<code>pkg/sync/sync_service.go</code>) <a class="header-anchor" href="#_2-instrumented-store-pattern-pkg-sync-sync-service-go" aria-label="Permalink to &quot;2. Instrumented Store Pattern (\`pkg/sync/sync_service.go\`)&quot;">​</a></h4><p><strong>Wrapper Design</strong>: Decorates stores without modifying them</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> instrumentedStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">H</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Store</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Embedded delegate</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    publish </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">publishFn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Callback to publish events</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">instrumentedStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">headers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ...</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Write to delegate store first</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s.Store.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, headers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> err</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Publish event after successful write</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(headers) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        s.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">publish</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(headers)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>Integration</strong>: Applied transparently when notifier is configured</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> options.notifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    svc.storeView </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> newInstrumentedStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">](ss, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">headers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        svc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">publish</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(headers, syncnotifier.SourceP2P)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    svc.storeView </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ss  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// No overhead when notifier not used</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="_3-event-driven-syncer-block-internal-syncing-syncer-go" tabindex="-1">3. Event-Driven Syncer (<code>block/internal/syncing/syncer.go</code>) <a class="header-anchor" href="#_3-event-driven-syncer-block-internal-syncing-syncer-go" aria-label="Permalink to &quot;3. Event-Driven Syncer (\`block/internal/syncing/syncer.go\`)&quot;">​</a></h4><p><strong>Subscription Management</strong>: Subscribe to both header and data stores</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Syncer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startP2PListeners</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Subscribe to header events</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    s.headerSub </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s.headerStore.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Notifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    go</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">consumeNotifierEvents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s.headerSub, syncnotifier.EventTypeHeader)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Subscribe to data events</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    s.dataSub </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s.dataStore.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Notifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    go</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">consumeNotifierEvents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s.dataSub, syncnotifier.EventTypeData)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>Event Consumption</strong>: React to store events</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Syncer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">consumeNotifierEvents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">syncnotifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Subscription</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">expected</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> syncnotifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EventType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> evt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sub.C:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> evt.Type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> expected {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                continue</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Ignore unexpected event types</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            s.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tryFetchFromP2P</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Fetch new data from P2P stores</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        case</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s.ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Done</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>Processing Flow</strong>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>P2P Store Write → Publish Event → Notifier → Subscription Channel → Syncer → Fetch from P2P → Process Block</span></span></code></pre></div><h3 id="key-design-properties" tabindex="-1">Key Design Properties <a class="header-anchor" href="#key-design-properties" aria-label="Permalink to &quot;Key Design Properties&quot;">​</a></h3><p><strong>Separation of Concerns</strong>:</p><ul><li>P2P stores: Focus on storing and serving headers/data</li><li>Notifier: Handles event distribution</li><li>Syncer: Coordinates block synchronization</li></ul><p><strong>Loose Coupling</strong>:</p><ul><li>Stores don&#39;t know about syncer</li><li>Syncer only knows about notifier interface</li><li>Changes to stores don&#39;t affect syncer</li></ul><p><strong>Event Filtering</strong>:</p><ul><li>Events include type (Header/Data) for filtering</li><li>Source tracking (P2P/Local) prevents feedback loops</li><li>Height/hash metadata enables decision-making</li></ul><p><strong>Resource Efficiency</strong>:</p><ul><li>No polling when no data available</li><li>Buffered channels (100 events) handle bursts</li><li>Event coalescing: multiple writes trigger single fetch</li></ul><p><strong>Testability</strong>:</p><ul><li>Notifier can be mocked easily</li><li>Events can be injected for testing</li><li>Stores can be tested independently</li></ul><h3 id="integration-with-existing-architecture" tabindex="-1">Integration with Existing Architecture <a class="header-anchor" href="#integration-with-existing-architecture" aria-label="Permalink to &quot;Integration with Existing Architecture&quot;">​</a></h3><p><strong>DA Retrieval</strong>: Unchanged, continues polling DA layer</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Syncer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">daWorkerLoop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        s.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tryFetchFromDA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(nextDARequestAt)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        time.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pollInterval)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>P2P Processing</strong>: Now event-triggered</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Syncer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tryFetchFromP2P</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    currentHeight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s.store.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Check header store</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    newHeaderHeight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s.headerStore.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Store</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newHeaderHeight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currentHeight {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        s.p2pHandler.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ProcessHeaderRange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(currentHeight</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, newHeaderHeight, s.heightInCh)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Check data store</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    newDataHeight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s.dataStore.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Store</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newDataHeight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currentHeight {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        s.p2pHandler.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ProcessDataRange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(currentHeight</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, newDataHeight, s.heightInCh)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>Local Broadcasts</strong>: Prevent network spam</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// When syncing from DA, broadcast locally only</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s.headerStore.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteToStoreAndBroadcast</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, event.Header,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    pubsub.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WithLocalPublication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><h3 id="event-loss-and-recovery" tabindex="-1">Event Loss and Recovery <a class="header-anchor" href="#event-loss-and-recovery" aria-label="Permalink to &quot;Event Loss and Recovery&quot;">​</a></h3><p>The event-driven design introduces a potential concern: what happens if events are dropped or the system restarts? The architecture handles these scenarios through <strong>store-based recovery</strong>:</p><h4 id="dropped-event-scenario" tabindex="-1">Dropped Event Scenario <a class="header-anchor" href="#dropped-event-scenario" aria-label="Permalink to &quot;Dropped Event Scenario&quot;">​</a></h4><p>When events are dropped (e.g., subscription buffer full), the system doesn&#39;t lose data:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Example:</span></span>
<span class="line"><span>- Event 90 is published but dropped (buffer full)</span></span>
<span class="line"><span>- Events 91-94 are also dropped</span></span>
<span class="line"><span>- Event 95 arrives and is successfully delivered</span></span>
<span class="line"><span>- Syncer processes event 95 and calls tryFetchFromP2P()</span></span></code></pre></div><p><strong>Recovery mechanism in tryFetchFromP2P()</strong>:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Syncer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tryFetchFromP2P</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    currentHeight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s.store.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Returns 89 (last processed)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // P2P store now has up to height 95</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    newHeaderHeight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s.headerStore.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Store</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Returns 95</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newHeaderHeight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currentHeight {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Fetches range [90, 95] from store, recovering all dropped events</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        s.p2pHandler.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ProcessHeaderRange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(currentHeight</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, newHeaderHeight, s.heightInCh)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>Key insight</strong>: Events are notifications, not the data itself. The P2P stores persist all data, so when any new event arrives, we query the store&#39;s height and fetch all missing blocks in the range.</p><h4 id="restart-scenario" tabindex="-1">Restart Scenario <a class="header-anchor" href="#restart-scenario" aria-label="Permalink to &quot;Restart Scenario&quot;">​</a></h4><p>On restart, the system state is as follows:</p><ol><li>P2P stores have persisted data up to some height (e.g., 100)</li><li>Syncer&#39;s local store has processed blocks up to height 85</li><li><strong>No events exist</strong> because the subscription is freshly created</li></ol><p><strong>Recovery depends on triggering mechanism</strong>:</p><p><strong>Scenario A - New P2P data arrives after restart</strong>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>- System restarts at height 85</span></span>
<span class="line"><span>- P2P store has blocks 1-100 persisted</span></span>
<span class="line"><span>- New block 101 arrives via P2P gossip</span></span>
<span class="line"><span>- Store write triggers event for height 101</span></span>
<span class="line"><span>- tryFetchFromP2P() queries store heights and fetches range [86, 101]</span></span>
<span class="line"><span>- All missed blocks [86-100] are recovered, plus the new block 101</span></span></code></pre></div><p><strong>Scenario B - No new P2P data (quiescent period)</strong>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>- System restarts at height 85</span></span>
<span class="line"><span>- P2P store has blocks 1-100 persisted</span></span>
<span class="line"><span>- No new blocks arrive via P2P gossip</span></span>
<span class="line"><span>- No events are published</span></span>
<span class="line"><span>- Syncer waits idle (no polling)</span></span></code></pre></div><p><strong>Important caveat</strong>: Until a new event triggers <code>tryFetchFromP2P()</code>, the system won&#39;t discover existing but unprocessed data in P2P stores. This is a <strong>deliberate trade-off</strong>:</p><ul><li><strong>Pro</strong>: No CPU waste polling when system is caught up</li><li><strong>Con</strong>: Restart during quiescent period delays catchup until new P2P activity</li><li><strong>Mitigation</strong>: DA layer continues polling independently, so blocks will eventually be retrieved from DA if P2P is quiet</li></ul><h4 id="da-layer-as-safety-net" tabindex="-1">DA Layer as Safety Net <a class="header-anchor" href="#da-layer-as-safety-net" aria-label="Permalink to &quot;DA Layer as Safety Net&quot;">​</a></h4><p>The DA retrieval loop continues to poll independently:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Syncer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">daWorkerLoop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        s.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tryFetchFromDA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(nextDARequestAt)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        time.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pollInterval)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>This ensures that:</p><ul><li>If P2P is quiet after restart, DA retrieval will eventually catch up</li><li>The system can&#39;t be permanently stuck, only temporarily delayed</li><li>DA provides the authoritative source of truth regardless of P2P state</li></ul><h4 id="design-rationale" tabindex="-1">Design Rationale <a class="header-anchor" href="#design-rationale" aria-label="Permalink to &quot;Design Rationale&quot;">​</a></h4><p>The event-driven design prioritizes <strong>efficiency over immediate post-restart catchup</strong>:</p><ol><li><strong>Normal operation</strong>: Events trigger immediately when data arrives (optimal)</li><li><strong>Dropped events</strong>: Next event recovers all gaps (self-healing)</li><li><strong>Restart with P2P data available</strong>: Next P2P event recovers all gaps (self-healing)</li><li><strong>Restart during quiescence</strong>: DA polling provides eventual consistency (safety net)</li></ol><p>This is acceptable because:</p><ul><li>Restarts are infrequent compared to normal operation</li><li>DA polling ensures eventual consistency</li><li>The efficiency gains during normal operation (no polling) outweigh the restart delay</li><li>Most restarts occur when new blocks are actively being produced, triggering P2P events</li></ul><h2 id="status" tabindex="-1">Status <a class="header-anchor" href="#status" aria-label="Permalink to &quot;Status&quot;">​</a></h2><p>Accepted and Implemented</p><h2 id="consequences" tabindex="-1">Consequences <a class="header-anchor" href="#consequences" aria-label="Permalink to &quot;Consequences&quot;">​</a></h2><h3 id="positive" tabindex="-1">Positive <a class="header-anchor" href="#positive" aria-label="Permalink to &quot;Positive&quot;">​</a></h3><ul><li><strong>Decoupling</strong>: Syncer no longer depends on P2P store internals</li><li><strong>Efficiency</strong>: No CPU cycles wasted on polling when idle</li><li><strong>Lower Latency</strong>: Immediate reaction to new data (no polling interval delay)</li><li><strong>Cleaner Code</strong>: Separation of concerns makes code easier to understand</li><li><strong>Better Testability</strong>: Components can be tested in isolation</li><li><strong>Extensibility</strong>: Easy to add new event types or subscribers</li><li><strong>Resource Optimization</strong>: Better CPU and memory usage patterns</li></ul><h3 id="negative" tabindex="-1">Negative <a class="header-anchor" href="#negative" aria-label="Permalink to &quot;Negative&quot;">​</a></h3><ul><li><strong>Additional Component</strong>: Notifier adds another layer to understand</li><li><strong>Event Buffer Management</strong>: Need to configure channel buffer sizes appropriately</li><li><strong>Debugging Complexity</strong>: Event flow can be harder to trace than direct calls</li><li><strong>Memory Overhead</strong>: Each subscription maintains a buffered channel (minimal but measurable)</li></ul><h3 id="neutral" tabindex="-1">Neutral <a class="header-anchor" href="#neutral" aria-label="Permalink to &quot;Neutral&quot;">​</a></h3><ul><li><strong>Learning Curve</strong>: Developers need to understand event-driven patterns</li><li><strong>Event Semantics</strong>: Need clear documentation on what events mean and when they&#39;re published</li><li><strong>Order Guarantees</strong>: Events are delivered in order per subscription but no cross-subscription ordering</li><li><strong>Backpressure</strong>: Slow consumers could fill buffers, but this is intentional design</li></ul><h2 id="references" tabindex="-1">References <a class="header-anchor" href="#references" aria-label="Permalink to &quot;References&quot;">​</a></h2><ul><li>Initial implementation: commits <code>94140e3d</code>, <code>c60a4256</code></li><li>Related ADR: ADR-003 (Peer Discovery) for P2P architecture context</li><li>Go-header library: Used for underlying P2P synchronization primitives</li><li>Observer pattern: Classic design pattern for decoupling publishers and subscribers</li></ul>`,100)]))}const c=i(t,[["render",l]]);export{g as __pageData,c as default};
