import{_ as s}from"./chunks/rollkit-bitcoin-1.b408003a.js";import{_ as a,o as n,c as l,X as o}from"./chunks/framework.49d79f81.js";const h=JSON.parse('{"title":"Bitcoin rollup tutorial","description":"","frontmatter":{"head":[["meta",{"name":"og:title","content":"Bitcoin rollup tutorial | Rollkit"},{"name":"og:description","content":false}]]},"headers":[],"relativePath":"tutorials/bitcoin.md","filePath":"tutorials/bitcoin.md","lastUpdated":1724752639000}'),p={name:"tutorials/bitcoin.md"},e=o('<h1 id="bitcoin-rollup-tutorial" tabindex="-1">Bitcoin rollup tutorial <a class="header-anchor" href="#bitcoin-rollup-tutorial" aria-label="Permalink to &quot;Bitcoin rollup tutorial&quot;">‚Äã</a></h1><h2 id="‚òÄÔ∏èintroduction" tabindex="-1">‚òÄÔ∏èIntroduction <a class="header-anchor" href="#‚òÄÔ∏èintroduction" aria-label="Permalink to &quot;‚òÄÔ∏èIntroduction&quot;">‚Äã</a></h2><p>In this tutorial, we will explore how to use Rollkit to create sovereign rollups on Bitcoin. First, we will install Bitcoin Core to run a local testnet. Then, we will install and set up a Rollkit node to work with Bitcoin as a data availability layer. Lastly, we&#39;ll look at how to create a custom EVM execution environment and how to deploy a sovereign rollup on Bitcoin using Rollkit.</p><p>By the end of this tutorial, you will have a good understanding of how Rollkit works and how to create sovereign rollups on Bitcoin using Rollkit. You will also have the knowledge and skills needed to customize Rollkit with different execution environments and data availability layers, opening up new possibilities for creating scalable and efficient blockchain applications.</p><p>Read more in our <a href="./../../../blog/sovereign-rollups-on-bitcoin">blog post</a>.</p><p><img src="'+s+`" alt="rollkit-bitcoin"></p><h3 id="üìñ-the-stack" tabindex="-1">üìñ The stack <a class="header-anchor" href="#üìñ-the-stack" aria-label="Permalink to &quot;üìñ The stack&quot;">‚Äã</a></h3><p>Sovereign rollups on Bitcoin are made possible through a module that allows Rollkit rollups to use Bitcoin for data availability. This integration opens up possibilities for developers to create rollups with arbitrary execution environments that inherit Bitcoin‚Äôs data availability guarantees and security guarantees.</p><p>The Taproot upgrade and <a href="https://ordinals.com/" target="_blank" rel="noreferrer">Ordinals</a> usage of Bitcoin for publishing arbitrary data made it possible to integrate Bitcoin as a data availability layer into Rollkit. The modular design of Rollkit allows for easy integration of new data availability layers, making it possible to deploy sovereign rollups on Bitcoin.</p><p>The goal of Rollkit is to make it easy to build and customize rollups, enabling developers to build sovereign rollups on Bitcoin or customize Rollkit with different execution environments and data availability layers.</p><h2 id="üíª-prerequisites" tabindex="-1">üíª Prerequisites <a class="header-anchor" href="#üíª-prerequisites" aria-label="Permalink to &quot;üíª Prerequisites&quot;">‚Äã</a></h2><p>An Ubuntu machine with:</p><ul><li>8GB RAM</li><li>160 GB SSD</li><li>Ubuntu 22.10</li><li>4 core AMD CPU</li></ul><h2 id="üõ†Ô∏è-dependency-setup" tabindex="-1">üõ†Ô∏è Dependency setup <a class="header-anchor" href="#üõ†Ô∏è-dependency-setup" aria-label="Permalink to &quot;üõ†Ô∏è Dependency setup&quot;">‚Äã</a></h2><p>First, make sure to update and upgrade the OS:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">apt</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">update</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">apt</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">upgrade</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-y</span></span></code></pre></div><p>These are essential packages that are necessary to execute many tasks like downloading files, compiling, and monitoring the nodes:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">apt</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">curl</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tar</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">wget</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">clang</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pkg-config</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">libssl-dev</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">jq</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build-essential</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">make</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ncdu</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">snapd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-y</span></span></code></pre></div><p>Now, we will install the remaining dependencies.</p><h3 id="üèÉ-golang" tabindex="-1">üèÉ Golang <a class="header-anchor" href="#üèÉ-golang" aria-label="Permalink to &quot;üèÉ Golang&quot;">‚Äã</a></h3><p>We will use golang to build and run our test networks. Install it for AMD with these commands:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">ver</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1.19.1</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> $HOME</span></span>
<span class="line"><span style="color:#FFCB6B;">wget</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://golang.org/dl/go</span><span style="color:#A6ACCD;">$ver</span><span style="color:#C3E88D;">.linux-amd64.tar.gz</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">rm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-rf</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/usr/local/go</span></span>
<span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tar</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-C</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/usr/local</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-xzf</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">go</span><span style="color:#A6ACCD;">$ver</span><span style="color:#C3E88D;">.linux-amd64.tar.gz</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#FFCB6B;">rm</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">go</span><span style="color:#A6ACCD;">$ver</span><span style="color:#C3E88D;">.linux-amd64.tar.gz</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">export PATH=</span><span style="color:#A6ACCD;">$PATH</span><span style="color:#C3E88D;">:/usr/local/go/bin:</span><span style="color:#A6ACCD;">$HOME</span><span style="color:#C3E88D;">/go/bin</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#A6ACCD;"> $HOME</span><span style="color:#C3E88D;">/.bash_profile</span></span>
<span class="line"><span style="color:#82AAFF;">source</span><span style="color:#A6ACCD;"> $HOME</span><span style="color:#C3E88D;">/.bash_profile</span></span>
<span class="line"><span style="color:#FFCB6B;">go</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">version</span></span></code></pre></div><h3 id="‚öíÔ∏è-foundry" tabindex="-1">‚öíÔ∏è Foundry <a class="header-anchor" href="#‚öíÔ∏è-foundry" aria-label="Permalink to &quot;‚öíÔ∏è Foundry&quot;">‚Äã</a></h3><p>Install Foundry:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">curl</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-L</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://foundry.paradigm.xyz/</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">bash</span></span></code></pre></div><p>Set the path:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">source</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/root/.bashrc</span></span></code></pre></div><p>Run this to finish the installation of Foundry:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">foundryup</span></span></code></pre></div><h3 id="ü™ô-install-bitcoin" tabindex="-1">ü™ô Install Bitcoin <a class="header-anchor" href="#ü™ô-install-bitcoin" aria-label="Permalink to &quot;ü™ô Install Bitcoin&quot;">‚Äã</a></h3><p>Running the rollup requires a local regtest Bitcoin node. You can set this up by running the following commands.</p><p>Install Bitcoin Core:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">snap</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bitcoin-core</span></span></code></pre></div><p>Check version:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">bitcoin-core.cli</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--version</span></span></code></pre></div><h2 id="üü¢-running-a-local-bitcoin-network" tabindex="-1">üü¢ Running a local Bitcoin network <a class="header-anchor" href="#üü¢-running-a-local-bitcoin-network" aria-label="Permalink to &quot;üü¢ Running a local Bitcoin network&quot;">‚Äã</a></h2><p>Set up the config for regtest (local network):</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">bitcoin-core.daemon</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">-chain=regtest</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">-rpcport=18332</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">-rpcuser=rpcuser</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">-rpcpassword=rpcpass</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">-fallbackfee=0.000001</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">-txindex=1</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><h3 id="üëõ-create-a-wallet-for-the-chain" tabindex="-1">üëõ Create a wallet for the chain <a class="header-anchor" href="#üëõ-create-a-wallet-for-the-chain" aria-label="Permalink to &quot;üëõ Create a wallet for the chain&quot;">‚Äã</a></h3><p>Open up a new terminal and run the following to create a wallet:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">bitcoin-core.cli</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-regtest</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-rpcport=18332</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-rpcuser=rpcuser</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-rpcpassword=rpcpass</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">createwallet</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">w1</span></span></code></pre></div><p>Your output will look like:</p><div class="language-console"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">&quot;name&quot;</span><span style="color:#82AAFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">w1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">&quot;warning&quot;</span><span style="color:#82AAFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="üé¨-start-generating-blocks" tabindex="-1">üé¨ Start generating blocks <a class="header-anchor" href="#üé¨-start-generating-blocks" aria-label="Permalink to &quot;üé¨ Start generating blocks&quot;">‚Äã</a></h3><p>Now, generate a new address and mine 101 blocks:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">export</span><span style="color:#A6ACCD;"> COINBASE</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">$(</span><span style="color:#FFCB6B;">bitcoin-core.cli</span><span style="color:#C3E88D;"> -regtest -rpcport=18332 -rpcuser=rpcuser -rpcpassword=rpcpass getnewaddress</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#FFCB6B;">bitcoin-core.cli</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-regtest</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-rpcport=18332</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-rpcuser=rpcuser</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-rpcpassword=rpcpass</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">generatetoaddress</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">101</span><span style="color:#A6ACCD;"> $COINBASE</span></span></code></pre></div><p>Next, we&#39;ll mine a block every second.</p><p>Add this script and remember where you placed it, I am putting it in my root directory:</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># Script to generate a new block every second</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Put this script at the root of your unpacked folder</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Generating a block every second. Press [CTRL+C] to stop..</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">address</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">\`</span><span style="color:#FFCB6B;">bitcoin-core.cli</span><span style="color:#C3E88D;"> -regtest -rpcport=18332 -rpcuser=rpcuser -rpcpassword=rpcpass getnewaddress</span><span style="color:#89DDFF;">\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">do</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Generate a new block </span><span style="color:#89DDFF;">\`</span><span style="color:#FFCB6B;">date</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">+%d/%m/%Y %H:%M:%S</span><span style="color:#89DDFF;">&#39;\`&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">bitcoin-core.cli</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-regtest</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-rpcport=18332</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-rpcuser=rpcuser</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-rpcpassword=rpcpass</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">generatetoaddress</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> $address</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">sleep</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">done</span></span></code></pre></div><p>Run the following from where you placed your <code>start.sh</code> script. Start generating blocks by running:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">bash</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">start.sh</span></span></code></pre></div><h4 id="üßä-block-height" tabindex="-1">üßä Block height <a class="header-anchor" href="#üßä-block-height" aria-label="Permalink to &quot;üßä Block height&quot;">‚Äã</a></h4><p>Check the current block height:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">bitcoin-core.cli</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-regtest</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-rpcport=18332</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-rpcuser=rpcuser</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-rpcpassword=rpcpass</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">getblockcount</span></span></code></pre></div><p>Your output will look similar to below:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">4980</span></span></code></pre></div><p>Set a variable for the common flags being used:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">export</span><span style="color:#A6ACCD;"> FLAGS</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">-regtest -rpcport=18332 -rpcuser=rpcuser -rpcpassword=rpcpass</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><h4 id="üßä-block-hash" tabindex="-1">üßä Block hash <a class="header-anchor" href="#üßä-block-hash" aria-label="Permalink to &quot;üßä Block hash&quot;">‚Äã</a></h4><p>Check the latest block hash:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">bitcoin-core.cli</span><span style="color:#A6ACCD;"> $FLAGS </span><span style="color:#C3E88D;">getblockhash</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4980</span></span></code></pre></div><p>Your output will be the block hash of the height you first queried:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">1d7e98aec3085b615c7c71659768fa42e774a87ab5981597e99794d240fb3db5</span></span></code></pre></div><p>Set the block hash as a variable:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">export</span><span style="color:#A6ACCD;"> HASH</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span><span style="color:#C3E88D;">d7e98aec3085b615c7c71659768fa42e774a87ab5981597e99794d240fb3db5</span></span></code></pre></div><h4 id="üßä-block-header" tabindex="-1">üßä Block header <a class="header-anchor" href="#üßä-block-header" aria-label="Permalink to &quot;üßä Block header&quot;">‚Äã</a></h4><p>Now to get the block header, run the following command (be sure to replace the hash with yours):</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">bitcoin-core.cli</span><span style="color:#A6ACCD;"> $FLAGS </span><span style="color:#C3E88D;">getblockheader</span><span style="color:#A6ACCD;"> $HASH</span></span></code></pre></div><p>Now to finish the exercise, query the height from the block header and the hash:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">bitcoin-core.cli</span><span style="color:#A6ACCD;"> $FLAGS </span><span style="color:#C3E88D;">getblockheader</span><span style="color:#A6ACCD;"> $HASH </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">jq</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.height</span><span style="color:#89DDFF;">&#39;</span></span></code></pre></div><h4 id="üé¨-restarting-the-local-network" tabindex="-1">üé¨ Restarting the local network <a class="header-anchor" href="#üé¨-restarting-the-local-network" aria-label="Permalink to &quot;üé¨ Restarting the local network&quot;">‚Äã</a></h4><p>In the case that you are starting your regtest network again, you can use the following command to clear the old chain history:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">rm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-rf</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">LOCATION OF .bitcoin folder</span><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="üèÉ‚Äç‚ôÄÔ∏è-running-the-ethermint-rollup" tabindex="-1">üèÉ‚Äç‚ôÄÔ∏è Running the Ethermint rollup <a class="header-anchor" href="#üèÉ‚Äç‚ôÄÔ∏è-running-the-ethermint-rollup" aria-label="Permalink to &quot;üèÉ‚Äç‚ôÄÔ∏è Running the Ethermint rollup&quot;">‚Äã</a></h2><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>The Ethermint tutorial is currently not supported.</p></div><p>Clone Ethermint:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">clone</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://github.com/celestiaorg/ethermint.git</span></span>
<span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ethermint</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">checkout</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bitcoin-da</span></span>
<span class="line"><span style="color:#FFCB6B;">make</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span></span></code></pre></div><p>Initialize the chain:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">bash</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">init.sh</span></span></code></pre></div><p>Set variables for starting the chain:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">export</span><span style="color:#A6ACCD;"> NAMESPACE</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">$(</span><span style="color:#FFCB6B;">openssl</span><span style="color:#C3E88D;"> rand -hex </span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>Start the chain:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">ethermintd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">start</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--rollkit.aggregator</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--rollkit.da_layer</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bitcoin</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--rollkit.da_config=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">{&quot;host&quot;:&quot;127.0.0.1:18332&quot;,&quot;user&quot;:&quot;rpcuser&quot;,&quot;pass&quot;:&quot;rpcpass&quot;,&quot;http_post_mode&quot;:true,&quot;disable_tls&quot;:true}</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--rollkit.namespace_id</span><span style="color:#A6ACCD;"> $NAMESPACE </span><span style="color:#C3E88D;">--rollkit.da_start_height</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span></code></pre></div><p>Congratulations! Now that you have your Ethermint and Bitcoin rollup running, you&#39;re ready to deploy some smart contracts to the EVM!</p><h3 id="‚ö°Ô∏è-initialize-development-environment" tabindex="-1">‚ö°Ô∏è Initialize development environment <a class="header-anchor" href="#‚ö°Ô∏è-initialize-development-environment" aria-label="Permalink to &quot;‚ö°Ô∏è Initialize development environment&quot;">‚Äã</a></h3><p>First, be sure you have <a href="https://book.getfoundry.sh/getting-started/installation.html" target="_blank" rel="noreferrer">installed Foundry</a> on your local development environment.</p><p>Next, create a new project and change into the directory:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">forge</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">init</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bitcoin-ethermint-app</span></span>
<span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bitcoin-ethermint-app</span></span></code></pre></div><p>Foundry has created an example smart contract located at <code>src/Counter.sol</code>.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>We will run the commands for the Foundry portion of this tutorial in the <code>~/bitcoin-ethermint-app/</code> directory.</p></div><h3 id="üìí-updating-the-contract-and-tests" tabindex="-1">üìí Updating the contract and tests <a class="header-anchor" href="#üìí-updating-the-contract-and-tests" aria-label="Permalink to &quot;üìí Updating the contract and tests&quot;">‚Äã</a></h3><p>Let&#39;s update the contracts to include a basic counter example. Open the <code>Counter.sol</code> file in the <code>src</code> directory and add the following code:</p><div class="language-solidity"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// SPDX-License-Identifier: MIT</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">pragma</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">solidity</span><span style="color:#A6ACCD;"> ^0.8.13</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">contract</span><span style="color:#FFCB6B;"> Counter</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> count</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">_count</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        count </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> _count</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">incrementCounter</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        count </span><span style="color:#89DDFF;">+=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">decrementCounter</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        count </span><span style="color:#89DDFF;">-=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getCount</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">view</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">returns</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">int</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> count</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>Next, let&#39;s create a test for this contract.</p><p>Open <code>test/Counter.T.Sol</code> and update the code with the following:</p><div class="language-solidity"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// SPDX-License-Identifier: MIT</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">pragma</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">solidity</span><span style="color:#A6ACCD;"> ^0.8.13</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&quot;forge-std/Test.sol&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&#39;src/Counter.sol&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">contract</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CounterTest</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">is</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Test</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    Counter counter</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setUp</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        counter </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Counter</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">testGetCount</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">int</span><span style="color:#A6ACCD;"> value </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> counter</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getCount</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">assertEq</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">emit</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">log_int</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">testIncrement</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        counter</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">incrementCounter</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        counter</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">incrementCounter</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">int</span><span style="color:#A6ACCD;"> value </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> counter</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getCount</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">assertEq</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">12</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">emit</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">log_int</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">testDecrement</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        counter</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">decrementCounter</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">int</span><span style="color:#A6ACCD;"> value </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> counter</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getCount</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">assertEq</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">9</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">emit</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">log_int</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>Foundry uses <a href="https://book.getfoundry.sh/reference/ds-test.html" target="_blank" rel="noreferrer">Dappsys Test</a> to provide basic logging and assertion functionality. It&#39;s included in the Forge Standard Library.</p><p>Here, we are using <code>assertEq</code> to assert equality. You can view all of the assertion functions available <a href="https://book.getfoundry.sh/reference/ds-test.html?highlight=log_int#asserting" target="_blank" rel="noreferrer">here</a>.</p><p>Next, we can test the contract using <strong>Forge</strong> with the following command:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">forge</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-vv</span></span></code></pre></div><p>A successful test will have output similar to the following:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">‚†ä</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> Compiling...</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">‚†∞</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> Installing solc version 0.8.17</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">‚†í</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> Successfully installed solc 0.8.17</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">‚†Ü</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> Compiling 18 files with 0.8.17</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">‚†ë</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> Solc 0.8.17 finished </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> 3.59s</span></span>
<span class="line"><span style="color:#FFCB6B;">Compiler</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">successful</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">Running</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tests</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test/Counter.t.sol:ContractTest</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">PASS</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">testDecrement</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">gas:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">12350</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#FFCB6B;">Logs:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">9</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">PASS</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">testGetCount</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">gas:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8510</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#FFCB6B;">Logs:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">10</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">PASS</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">testIncrement</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">gas:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">13285</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#FFCB6B;">Logs:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">12</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">Test</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">result:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ok.</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">passed</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">failed</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">finished</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2.24</span><span style="color:#C3E88D;">ms</span></span></code></pre></div><h3 id="üìú-updating-the-deployment-script" tabindex="-1">üìú Updating the deployment script <a class="header-anchor" href="#üìú-updating-the-deployment-script" aria-label="Permalink to &quot;üìú Updating the deployment script&quot;">‚Äã</a></h3><p>Now that we&#39;ve tested the contract, let&#39;s try deploying it locally using <a href="https://book.getfoundry.sh/tutorials/solidity-scripting.html" target="_blank" rel="noreferrer">Solidity Scripting</a>.</p><p>To do so, update the deloyment script at <code>script/Counter.s.sol</code> with the following code:</p><div class="language-solidity"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// SPDX-License-Identifier: MIT</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">pragma</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">solidity</span><span style="color:#A6ACCD;"> ^0.8.13</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&quot;forge-std/Script.sol&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> {</span><span style="color:#FFCB6B;">Counter</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">&quot;src/Counter.sol&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">contract</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CounterScript</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">is</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Script</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setUp</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">run</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        vm</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">startBroadcast</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Counter</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        vm</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stopBroadcast</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>Now we can use this script to deploy our smart contract to either a live or test network.</p><h3 id="üè†-deploying-locally" tabindex="-1">üè† Deploying locally <a class="header-anchor" href="#üè†-deploying-locally" aria-label="Permalink to &quot;üè† Deploying locally&quot;">‚Äã</a></h3><p>Next start Anvil, the local testnet:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">anvil</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--port</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">9545</span></span></code></pre></div><p>Once started, Anvil will give you a local RPC endpoint as well as a handful of Private Keys and Accounts that you can use.</p><p>Set <code>ANVIL_KEY</code> with one of the private keys generated by running:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">export</span><span style="color:#A6ACCD;"> ANVIL_KEY</span><span style="color:#89DDFF;">=&lt;</span><span style="color:#C3E88D;">anvil-private-ke</span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>And set the RPC URL as an environment variable:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">export</span><span style="color:#A6ACCD;"> RPC_URL</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">http://127.0.0.1:9545</span></span></code></pre></div><p>We can now use the local RPC along with one of the private keys to deploy locally:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">forge</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">script/Counter.s.sol:CounterScript</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--fork-url</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">$RPC_URL  </span><span style="color:#C3E88D;">--private-key</span><span style="color:#A6ACCD;"> $ANVIL_KEY </span><span style="color:#C3E88D;">--broadcast</span></span></code></pre></div><p>Once the contract has been deployed locally, Anvil will log out the contract address.</p><p>Next, set the contract address as an environment variable:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">export</span><span style="color:#A6ACCD;"> CONTRACT_ADDRESS</span><span style="color:#89DDFF;">=&lt;</span><span style="color:#C3E88D;">contract-addres</span><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>We can then test sending transactions to it with <code>cast send</code>.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">cast</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">send</span><span style="color:#A6ACCD;"> $CONTRACT_ADDRESS </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">incrementCounter()</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">--private-key $ANVIL_KEY </span><span style="color:#C3E88D;">--rpc-url</span><span style="color:#A6ACCD;"> $RPC_URL</span></span></code></pre></div><p>We can then perform read operations with <code>cast call</code>:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">cast</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">call</span><span style="color:#A6ACCD;"> $CONTRACT_ADDRESS </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">getCount()(int)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--rpc-url</span><span style="color:#A6ACCD;"> $RPC_URL</span></span></code></pre></div><h3 id="üß™-deploying-to-the-ethermint-sovereign-rollup" tabindex="-1">üß™ Deploying to the Ethermint sovereign rollup <a class="header-anchor" href="#üß™-deploying-to-the-ethermint-sovereign-rollup" aria-label="Permalink to &quot;üß™ Deploying to the Ethermint sovereign rollup&quot;">‚Äã</a></h3><p>Now that we&#39;ve deployed and tested locally, we can deploy to our Ethermint chain.</p><p>First, we will need to export the private key generated by the ethermint <code>init.sh</code> script:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">PRIVATE_KEY</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">$(</span><span style="color:#FFCB6B;">ethermintd</span><span style="color:#C3E88D;"> keys unsafe-export-eth-key mykey --keyring-backend test</span><span style="color:#89DDFF;">)</span></span></code></pre></div><blockquote><p>NOTE: Here, the key name from <code>init.sh</code> is <code>mykey</code> but you can modify the <code>init.sh</code> to change the name of your key.</p></blockquote><p>Now, we can start deploying the smart contract to our Ethermint chain.</p><p>To do so, run the following script:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">forge</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">script/Counter.s.sol:CounterScript</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">--rpc-url </span><span style="color:#C3E88D;">http://127.0.0.1:8545</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--private-key</span><span style="color:#A6ACCD;"> $PRIVATE_KEY </span><span style="color:#C3E88D;">--broadcast</span></span></code></pre></div><p>Set the contract address in the output as the <code>CONTRACT_ADDRESS</code> variable:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">export</span><span style="color:#A6ACCD;"> CONTRACT_ADDRESS</span><span style="color:#89DDFF;">=&lt;</span><span style="color:#C3E88D;">new-contract-addres</span><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>Once the contract has been deployed to the Ethermint rollup, we can use <code>cast send</code> to test sending transactions to it:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">cast</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">send</span><span style="color:#A6ACCD;"> $CONTRACT_ADDRESS </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">incrementCounter()</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">--rpc-url </span><span style="color:#C3E88D;">http://127.0.0.1:8545</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--private-key</span><span style="color:#A6ACCD;"> $PRIVATE_KEY</span></span></code></pre></div><p>We can then perform read operations with <code>cast call</code>:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">cast</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">call</span><span style="color:#A6ACCD;"> $CONTRACT_ADDRESS </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">getCount()(int)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--rpc-url</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">http://127.0.0.1:8545</span></span></code></pre></div>`,138),t=[e];function c(r,i,C,y,D,A){return n(),l("div",null,t)}const u=a(p,[["render",c]]);export{h as __pageData,u as default};
