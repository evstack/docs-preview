import{_ as n,c as t,a3 as a,o as i}from"./chunks/framework.BA2tfOtD.js";const p=JSON.parse('{"title":"Sequencing","description":"","frontmatter":{"head":[["meta",{"name":"og:title","content":"Sequencing | Rollkit"},{"name":"og:description","content":false}]]},"headers":[],"relativePath":"tutorials/sequencing/overview.md","filePath":"tutorials/sequencing/overview.md","lastUpdated":1747149748000}'),s={name:"tutorials/sequencing/overview.md"};function r(o,e,l,c,h,u){return i(),t("div",null,e[0]||(e[0]=[a(`<h1 id="sequencing" tabindex="-1">Sequencing <a class="header-anchor" href="#sequencing" aria-label="Permalink to &quot;Sequencing&quot;">​</a></h1><p>The next step after choosing your DA layer is to choose your sequencing scheme.</p><h2 id="sequencing-interface" tabindex="-1">Sequencing Interface <a class="header-anchor" href="#sequencing-interface" aria-label="Permalink to &quot;Sequencing Interface {#sequencing-interface}&quot;">​</a></h2><p><a href="https://github.com/rollkit/rollkit/blob/main/core/sequencer/sequencing.go#L11" target="_blank" rel="noreferrer">Sequencing Interface</a> defines a sequencing interface for communicating between any sequencing network and Rollkit. The key functions of the interface are defined as shown below.</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SubmitRollupTransaction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rollupId, data) returns (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetNextBatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rollupId, lastBatchHash, maxBytes) returns (batch, timestamp)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">VerifyBatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rollupId, batchHash) returns (status)</span></span></code></pre></div><p>It mainly consists of:</p><ul><li><code>SubmitRollupTransaction</code> relays the rollup transactions from Rollkit rollup to the sequencing network</li><li><code>GetNextBatch</code> returns the next batch of transactions along with a deterministic timestamp</li><li><code>VerifyBatch</code> validates the sequenced batch</li></ul><h2 id="sequencing-implementations" tabindex="-1">Sequencing Implementations <a class="header-anchor" href="#sequencing-implementations" aria-label="Permalink to &quot;Sequencing Implementations {#sequencing-implementations}&quot;">​</a></h2><p>An implementation of the sequencing interface mainly acts as a middleware that connects Rollkit rollup and the sequencing layer. It implements the sequencing interface functions described above. For example, <a href="https://github.com/rollkit/rollkit/blob/main/sequencers/single/README.md" target="_blank" rel="noreferrer">single-sequencer</a> is the refactored functionality from the Rollkit prior to <code>v1.0.0</code>. The single sequencer is the middleware run by the aggregator node of the Rollkit rollup. The aggregator node relays rollup transactions to single sequencer which then submits them to the DA network (Celestia). The header producer node then retrieves (via <code>GetNextBatch</code>) the batched transaction from the single sequencer to execute the transactions and produce the updated rollup state. Similarly, there are other sequencing middlewares which can be built for various sequencing strategies or even for connecting to different third-party sequencing networks.</p><p>The sequencing implementations that are currently work in progress:</p><ul><li><a href="./based">based-sequencer</a></li><li><a href="./forced-inclusion">forced-inclusion-sequencer</a></li></ul>`,11)]))}const g=n(s,[["render",r]]);export{p as __pageData,g as default};
