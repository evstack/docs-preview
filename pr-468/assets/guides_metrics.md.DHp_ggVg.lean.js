import{_ as e,c as a,a3 as r,o}from"./chunks/framework.DVw5fkKK.js";const u=JSON.parse('{"title":"How to configure metrics","description":"","frontmatter":{"head":[["meta",{"name":"og:title","content":"How to configure metrics | Rollkit"},{"name":"og:description","content":false}]]},"headers":[],"relativePath":"guides/metrics.md","filePath":"guides/metrics.md","lastUpdated":1727706221000}'),i={name:"guides/metrics.md"};function s(d,t,n,c,l,h){return o(),a("div",null,t[0]||(t[0]=[r('<h1 id="how-to-configure-metrics" tabindex="-1">How to configure metrics <a class="header-anchor" href="#how-to-configure-metrics" aria-label="Permalink to &quot;How to configure metrics&quot;">​</a></h1><h1 id="metrics" tabindex="-1">Metrics <a class="header-anchor" href="#metrics" aria-label="Permalink to &quot;Metrics&quot;">​</a></h1><p>Rollkit can report and serve the Prometheus metrics, which in their turn can be consumed by Prometheus collector(s).</p><p>This functionality is disabled by default.</p><p>To enable the Prometheus metrics, set <code>instrumentation.prometheus=true</code> in your config file. Metrics will be served under <code>/metrics</code> on 26660 port by default. Listen address can be changed in the config file (see <code>instrumentation.prometheus\\_listen\\_addr</code>).</p><h2 id="list-of-available-metrics" tabindex="-1">List of available metrics <a class="header-anchor" href="#list-of-available-metrics" aria-label="Permalink to &quot;List of available metrics&quot;">​</a></h2><p>The following metrics are available:</p><table tabindex="0"><thead><tr><th><strong>Name</strong></th><th><strong>Type</strong></th><th><strong>Tags</strong></th><th><strong>Description</strong></th></tr></thead><tbody><tr><td>gas_price</td><td>Gauge</td><td></td><td>Gas Price of the DA transaction</td></tr><tr><td>last_blob_size</td><td>Gauge</td><td></td><td>Last blob size submitted to the DA</td></tr><tr><td>transaction_status</td><td>Gauge</td><td></td><td>Tranasction status of the DA transaction</td></tr><tr><td>num_pending_blocks</td><td>Gauge</td><td></td><td>Number of blocks pending DA submission</td></tr><tr><td>included_block_height</td><td>Gauge</td><td></td><td>Block height of the last DA transaction</td></tr></tbody></table>',8)]))}const g=e(i,[["render",s]]);export{u as __pageData,g as default};
