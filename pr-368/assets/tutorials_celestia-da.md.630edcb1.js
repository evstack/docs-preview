import{_ as e,o as a,c as s,X as o}from"./chunks/framework.d8f97d66.js";const y=JSON.parse('{"title":"GM world rollup: Deploying to Celestia","description":"","frontmatter":{"head":[["meta",{"name":"og:title","content":"GM world rollup: Deploying to Celestia | Rollkit"},{"name":"og:description","content":false}]]},"headers":[],"relativePath":"tutorials/celestia-da.md","filePath":"tutorials/celestia-da.md","lastUpdated":1715257292000}'),n={name:"tutorials/celestia-da.md"},t=o(`<h1 id="gm-world-rollup-deploying-to-celestia" tabindex="-1">GM world rollup: Deploying to Celestia <a class="header-anchor" href="#gm-world-rollup-deploying-to-celestia" aria-label="Permalink to &quot;GM world rollup: Deploying to Celestia&quot;">‚Äã</a></h1><h2 id="introduction" tabindex="-1">üåû Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;üåû Introduction {#introduction}&quot;">‚Äã</a></h2><p>This tutorial serves as a comprehensive guide for deploying your gm-world rollup on Celestia&#39;s data availability network. From the Rollkit perspective, there&#39;s no difference in posting blocks to Celestia&#39;s testnet or mainnet beta.</p><p>Before proceeding, ensure that you have completed the <a href="/docs-preview/pr-368/tutorials/gm-world">GM World Rollup</a> tutorial, which covers setting up a local sovereign gm-world rollup and connecting it to a local mock DA node.</p><h2 id="ü™∂-runnning-a-celestia-light-node" tabindex="-1">ü™∂ Runnning a Celestia Light Node <a class="header-anchor" href="#ü™∂-runnning-a-celestia-light-node" aria-label="Permalink to &quot;ü™∂ Runnning a Celestia Light Node&quot;">‚Äã</a></h2><p>Before you can start your rollup node, you need to initiate, sync, and possibly fund a light node on one of Celestia&#39;s networks:</p><ul><li><a href="https://docs.celestia.org/nodes/arabica-devnet#arabica-devnet" target="_blank" rel="noreferrer">Arabica Devnet</a></li><li><a href="https://docs.celestia.org/nodes/mocha-testnet#mocha-testnet" target="_blank" rel="noreferrer">Mocha Testnet</a></li><li><a href="https://docs.celestia.org/nodes/mainnet#mainnet-beta" target="_blank" rel="noreferrer">Mainnet Beta</a></li></ul><p>The main difference lies in how you fund your wallet address: using testnet tokens or <a href="https://docs.celestia.org/learn/tia#overview-of-tia" target="_blank" rel="noreferrer">TIA</a> for the mainnet beta.</p><p>After successfully starting a light node, it&#39;s time to start posting the blocks of data that your rollup generates.</p><h2 id="üßπ-cleaning-previous-chain-history" tabindex="-1">üßπ Cleaning Previous Chain History <a class="header-anchor" href="#üßπ-cleaning-previous-chain-history" aria-label="Permalink to &quot;üßπ Cleaning Previous Chain History&quot;">‚Äã</a></h2><p>From the <a href="/docs-preview/pr-368/tutorials/gm-world">GM World Rollup</a> tutorial, you should already have the <code>gmd</code> binary and the <code>$HOME/.gm</code> directory.</p><p>To clear old rollup data:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">rm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-r</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/usr/local/bin/gmd</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">rm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-rf</span><span style="color:#A6ACCD;"> $HOME</span><span style="color:#C3E88D;">/.gm</span></span></code></pre></div><h2 id="üèóÔ∏è-building-your-rollup" tabindex="-1">üèóÔ∏è Building Your Rollup <a class="header-anchor" href="#üèóÔ∏è-building-your-rollup" aria-label="Permalink to &quot;üèóÔ∏è Building Your Rollup&quot;">‚Äã</a></h2><p>Now we need to rebuild our rollup by simply running the existing <code>init.sh</code> script:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> $HOME</span><span style="color:#C3E88D;">/gm</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">bash</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">init.sh</span></span></code></pre></div><p>This process creates a new <code>$HOME/.gm</code> directory and a new <code>gmd</code> binary. Next, we need to connect our rollup to the running Celestia light node.</p><h2 id="üõ†Ô∏è-configuring-flags-for-da" tabindex="-1">üõ†Ô∏è Configuring Flags for DA <a class="header-anchor" href="#üõ†Ô∏è-configuring-flags-for-da" aria-label="Permalink to &quot;üõ†Ô∏è Configuring Flags for DA&quot;">‚Äã</a></h2><p>Now we&#39;re ready to start our rollup and connect it to the Celestia light node. There are three DA configuration flags we need to provide to the <code>gmd start</code> command:</p><ul><li><code>--rollkit.da_start_height</code></li><li><code>--rollkit.da_auth_token</code></li><li><code>--rollkit.da_namespace</code></li></ul><p>Let&#39;s determine what to provide for each of them.</p><p>First, let&#39;s query the DA Layer start height using an RPC endpoint provided by Celestia Labs. For Mocha testnet it would be - <a href="https://rpc-mocha.pops.one/block" target="_blank" rel="noreferrer">https://rpc-mocha.pops.one/block</a>, and for mainnet beta - <a href="https://rpc.lunaroasis.net/block" target="_blank" rel="noreferrer">https://rpc.lunaroasis.net/block</a></p><p>Here is an example for the Mocha testnet (replace URL for mainnet beta if needed):</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">DA_BLOCK_HEIGHT</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">$(</span><span style="color:#FFCB6B;">curl</span><span style="color:#C3E88D;"> https://rpc-mocha.pops.one/block </span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;"> </span><span style="color:#FFCB6B;">jq</span><span style="color:#C3E88D;"> -r </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.result.block.header.height</span><span style="color:#89DDFF;">&#39;)</span></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-e</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">\\n Your DA_BLOCK_HEIGHT is </span><span style="color:#A6ACCD;">$DA_BLOCK_HEIGHT</span><span style="color:#C3E88D;"> \\n</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><p>You will see the output like this:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Your DA_BLOCK_HEIGHT is 1777655</span></span></code></pre></div><p>Now, obtain an authentication token for your light node as follows (for mainnet beta, simply omit the --p2p.network flag):</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">AUTH_TOKEN</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">$(</span><span style="color:#FFCB6B;">celestia</span><span style="color:#C3E88D;"> light auth write --p2p.network mocha</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-e</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">\\n Your DA AUTH_TOKEN is </span><span style="color:#A6ACCD;">$AUTH_TOKEN</span><span style="color:#C3E88D;"> \\n</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><p>The output would look like this:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">Your</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">DA</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">AUTH_TOKEN</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">is</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJBbGxvdyI6WyJwdWJsaWMiLCJyZWFkIiwid3JpdGUiXX0.cSrJjpfUdTNFtzGho69V0D_8kyECn9Mzv8ghJSpKRDE</span></span></code></pre></div><p>Now, let&#39;s also set up a namespace for our blocks by simply setting a variable like this:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">DA_NAMESPACE</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">00000000000000000000000000000000000000000008</span><span style="color:#C3E88D;">e5f679bf7116cb</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>00000000000000000000000000000000000000000008e5f679bf7116cb</code> is a default namespace for mocha testnet. You can set your own by using a command similar to this (or, you could get creative üòé):</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">openssl</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">rand</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-hex</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span></span></code></pre></div><p>Replace the last 10 characters in <code>00000000000000000000000000000000000000000008e5f679bf7116cb</code> with the newly generated 10 characters.</p><p><a href="https://docs.celestia.org/developers/node-tutorial#namespaces" target="_blank" rel="noreferrer">Learn more about namespaces</a>.</p></div><h2 id="üî•-running-your-rollup-connected-to-a-celestia-light-node" tabindex="-1">üî• Running Your Rollup Connected to a Celestia Light Node <a class="header-anchor" href="#üî•-running-your-rollup-connected-to-a-celestia-light-node" aria-label="Permalink to &quot;üî• Running Your Rollup Connected to a Celestia Light Node&quot;">‚Äã</a></h2><p>Now let&#39;s run our rollup node with all DA flags:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">gmd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">start</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C3E88D;">--rollkit.aggregator</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C3E88D;">--rollkit.da_auth_token</span><span style="color:#A6ACCD;"> $AUTH_TOKEN \\</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C3E88D;">--rollkit.da_namespace</span><span style="color:#A6ACCD;"> $DA_NAMESPACE \\</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C3E88D;">--rollkit.da_start_height</span><span style="color:#A6ACCD;"> $DA_BLOCK_HEIGHT \\</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C3E88D;">--minimum-gas-prices=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">0.025stake</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><p>Now, the rollup is running and posting blocks (aggregated in batches) to Celestia. You can view your rollup by finding your namespace or account on <a href="https://docs.celestia.org/nodes/mocha-testnet#explorers" target="_blank" rel="noreferrer">Mocha devnet</a> or <a href="https://docs.celestia.org/nodes/mainnet#explorers" target="_blank" rel="noreferrer">mainnet beta</a> explorers.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>For details on configuring gas prices specifically for the DA network, see our <a href="/docs-preview/pr-368/guides/gas-price">DA Network Gas Price Guide</a>. This is separate from the <code>--minimum-gas-prices=&quot;0.025stake&quot;</code> setting, which is used for rollup network operations.</p></div><h2 id="üéâ-next-steps" tabindex="-1">üéâ Next steps <a class="header-anchor" href="#üéâ-next-steps" aria-label="Permalink to &quot;üéâ Next steps&quot;">‚Äã</a></h2><p>Congratulations! You&#39;ve built a local rollup that posts to Celestia&#39;s testnet or mainnet. Well done! Now, go forth and build something great! Good luck!</p>`,40),l=[t];function r(p,i,c,d,h,u){return a(),s("div",null,l)}const g=e(n,[["render",r]]);export{y as __pageData,g as default};
