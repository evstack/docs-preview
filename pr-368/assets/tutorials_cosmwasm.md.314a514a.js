import{C as n}from"./chunks/callout.7b940de9.js";import{o,c as l,k as s,O as e,a,X as t}from"./chunks/framework.d8f97d66.js";const p=s("h1",{id:"🗞️-cosmwasm-rollup",tabindex:"-1"},[a("🗞️ CosmWasm rollup "),s("a",{class:"header-anchor",href:"#🗞️-cosmwasm-rollup","aria-label":'Permalink to "🗞️ CosmWasm rollup"'},"​")],-1),c=s("p",null,[a("CosmWasm is a smart contracting platform built for the Cosmos ecosystem by making use of "),s("a",{href:"https://webassembly.org",target:"_blank",rel:"noreferrer"},"WebAssembly"),a(" (Wasm) to build smart contracts for Cosmos-SDK. In this tutorial, we will be exploring how to integrate CosmWasm with Celestia's "),s("a",{href:"https://docs.celestia.org/concepts/how-celestia-works/data-availability-layer",target:"_blank",rel:"noreferrer"},"data availability layer"),a(" using Rollkit.")],-1),r={class:"tip custom-block"},i=s("p",{class:"custom-block-title"},"TIP",-1),C=t(`<div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>The script for this tutorial is built for Celestia&#39;s <a href="https://docs.celestia.org/nodes/mocha-testnet" target="_blank" rel="noreferrer">Mocha testnet</a>.</p></div><p>You can learn more about CosmWasm <a href="https://docs.cosmwasm.com/docs/" target="_blank" rel="noreferrer">here</a>.</p><p>The smart contract we will use for this tutorial is one provided by the CosmWasm team for Nameservice purchasing.</p><p>You can check out the contract <a href="https://github.com/InterWasm/cw-contracts/tree/main/contracts/nameservice" target="_blank" rel="noreferrer">here</a>.</p><p>How to write the Rust smart contract for Nameservice is outside the scope of this tutorial. In the future we will add more tutorials for writing CosmWasm smart contracts for Celestia.</p><h2 id="dependencies" tabindex="-1">💻 CosmWasm dependency installations <a class="header-anchor" href="#dependencies" aria-label="Permalink to &quot;💻 CosmWasm dependency installations {#dependencies}&quot;">​</a></h2><h3 id="environment" tabindex="-1">🛠️ Environment setup <a class="header-anchor" href="#environment" aria-label="Permalink to &quot;🛠️ Environment setup {#environment}&quot;">​</a></h3><p>For this tutorial, we will be using <code>curl</code> and <code>jq</code> as helpful tools. You can follow the guide on installing them <a href="https://docs.celestia.org/nodes/environment/#-install-wget-and-jq" target="_blank" rel="noreferrer">here</a>.</p><h3 id="install-golang" tabindex="-1">🏃 Golang dependency <a class="header-anchor" href="#install-golang" aria-label="Permalink to &quot;🏃 Golang dependency {#install-golang}&quot;">​</a></h3><p>The Golang version used for this tutorial is v1.19+</p><p>You can install Golang by following our tutorial <a href="https://docs.celestia.org/nodes/environment#install-golang" target="_blank" rel="noreferrer">here</a>.</p><h3 id="install-rust" tabindex="-1">🦀 Rust installation <a class="header-anchor" href="#install-rust" aria-label="Permalink to &quot;🦀 Rust installation {#install-rust}&quot;">​</a></h3><h4 id="rustup" tabindex="-1">🔨 Rustup <a class="header-anchor" href="#rustup" aria-label="Permalink to &quot;🔨 Rustup {#rustup}&quot;">​</a></h4><p>First, before installing Rust, you would need to install <code>rustup</code>.</p><p>On Mac and Linux systems, here are the commands for installing it:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">curl</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--proto</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">=https</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--tlsv1.2</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-sSf</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://sh.rustup.rs</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">sh</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>You will see a note similar to below after installing Rust:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight has-focused-lines"><code><span class="line"><span style="color:#FFCB6B;">Rust</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">is</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">installed</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">now.</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Great!</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">To</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">get</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">started</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">you</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">may</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">need</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">to</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">restart</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">your</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">current</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">shell.</span></span>
<span class="line"><span style="color:#FFCB6B;">This</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">would</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">reload</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">your</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">PATH</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">environment</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">variable</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">to</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">include</span></span>
<span class="line"><span style="color:#FFCB6B;">Cargo</span><span style="color:#FFCB6B;">&#39;s bin directory ($HOME/.cargo/bin).</span></span>
<span class="line"></span>
<span class="line has-focus"><span style="color:#FFCB6B;">To configure your current shell, run: </span></span>
<span class="line has-focus"><span style="color:#FFCB6B;">source &quot;$HOME/.cargo/env&quot; </span></span></code></pre></div><p>If you don&#39;t follow the guidance, you won&#39;t be able to continue with the tutorial!</p></div><p>After installation, follow the commands here to setup Rust.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">rustup</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">stable</span></span>
<span class="line"><span style="color:#FFCB6B;">cargo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">version</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">rustup</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">target</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">list</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--installed</span></span>
<span class="line"><span style="color:#FFCB6B;">rustup</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">target</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">wasm32-unknown-unknown</span></span></code></pre></div><p>Your output should look similar to below:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">info:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">using</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">existing</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">stable-aarch64-apple-darwin</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#FFCB6B;">info:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">toolchain</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">set</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">to</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">stable-aarch64-apple-darwin</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">stable-aarch64-apple-darwin</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">unchanged</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">rustc</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1.74</span><span style="color:#C3E88D;">.0</span><span style="color:#A6ACCD;"> (79e9716c9 </span><span style="color:#F78C6C;">2023</span><span style="color:#C3E88D;">-11-13</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">cargo</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1.74</span><span style="color:#C3E88D;">.0</span><span style="color:#A6ACCD;"> (ecb9851af </span><span style="color:#F78C6C;">2023</span><span style="color:#C3E88D;">-10-18</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#FFCB6B;">aarch64-apple-darwin</span></span>
<span class="line"><span style="color:#FFCB6B;">wasm32-unknown-unknown</span></span>
<span class="line"><span style="color:#FFCB6B;">info:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">downloading</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">component</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">rust-std</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">wasm32-unknown-unknown</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#FFCB6B;">info:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">installing</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">component</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">rust-std</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">wasm32-unknown-unknown</span><span style="color:#89DDFF;">&#39;</span></span></code></pre></div><h3 id="docker-installation" tabindex="-1">🐳 Docker installation <a class="header-anchor" href="#docker-installation" aria-label="Permalink to &quot;🐳 Docker installation {#docker-installation}&quot;">​</a></h3><p>We will be using Docker later in this tutorial for compiling a smart contract to use a small footprint. We recommend installing Docker on your machine.</p><p>Examples on how to install it on Linux are found <a href="https://docs.docker.com/engine/install/ubuntu" target="_blank" rel="noreferrer">here</a>. Find the right instructions specific for <a href="https://docs.docker.com/engine/install" target="_blank" rel="noreferrer">your OS here</a>.</p><h3 id="wasmd-installation" tabindex="-1">💻 Wasmd installation <a class="header-anchor" href="#wasmd-installation" aria-label="Permalink to &quot;💻 Wasmd installation {#wasmd-installation}&quot;">​</a></h3><p>Here, we are going to pull down the <code>wasmd</code> repository and replace CometBFT with Rollkit. Rollkit is a drop-in replacement for CometBFT that allows Cosmos-SDK applications to connect to Celestia&#39;s data availability network.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">clone</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://github.com/CosmWasm/wasmd.git</span></span>
<span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">wasmd</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">checkout</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tags/v0.50.0</span></span>
<span class="line"><span style="color:#FFCB6B;">go</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mod</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">edit</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-replace</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">github.com/cosmos/cosmos-sdk=github.com/rollkit/cosmos-sdk@v0.50.5-rollkit-v0.13.1-no-fraud-proofs</span></span>
<span class="line"><span style="color:#FFCB6B;">go</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mod</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tidy</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-compat=1.17</span></span>
<span class="line"><span style="color:#FFCB6B;">go</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mod</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">download</span></span></code></pre></div><p>Now, comment out lines 902-904 in <code>app/app.go</code>:</p><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> err </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">nil</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">panic</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">err</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>This is a temporary fix until <a href="https://github.com/CosmWasm/wasmd/issues/1785" target="_blank" rel="noreferrer">CosmWasm/wasmd#1785</a> is resolved.</p><p>And build the binary:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">make</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>You will have to install <code>gcc</code> if you are trying it on a clean linux vm.</p></div><h3 id="celestia-node" tabindex="-1">✨ Celestia node <a class="header-anchor" href="#celestia-node" aria-label="Permalink to &quot;✨ Celestia node {#celestia-node}&quot;">​</a></h3><p>You will need a light node running with test tokens on <a href="https://docs.celestia.org/nodes/mocha-testnet" target="_blank" rel="noreferrer">Mocha testnet</a> in order to complete this tutorial. Complete <a href="https://docs.celestia.org/developers/node-tutorial" target="_blank" rel="noreferrer">the tutorial</a> and start up your node.</p><p>Be sure you have initialized your node before trying to start it. Your start command should look similar to:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">celestia</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">light</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">start</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--core.ip</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">rpc-mocha.pops.one</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--p2p.network</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mocha</span></span></code></pre></div><h2 id="setting-up-environment-on-celestia" tabindex="-1">🌌 Setting up your environment for CosmWasm on Celestia <a class="header-anchor" href="#setting-up-environment-on-celestia" aria-label="Permalink to &quot;🌌 Setting up your environment for CosmWasm on Celestia {#setting-up-environment-on-celestia}&quot;">​</a></h2><p>Now the <code>wasmd</code> binary is built, we need to setup a local network that communicates between <code>wasmd</code> and Rollkit.</p><h3 id="initialize-rollup" tabindex="-1">🗞️ Initializing CosmWasm rollup with a bash script <a class="header-anchor" href="#initialize-rollup" aria-label="Permalink to &quot;🗞️ Initializing CosmWasm rollup with a bash script {#initialize-rollup}&quot;">​</a></h3><p>We have a handy <code>init.sh</code> <a href="https://github.com/rollkit/docs/blob/main/public/cosmwasm/init.sh" target="_blank" rel="noreferrer">found in this repo</a>.</p><p>We can copy it over to our directory with the following commands:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># From inside the \`wasmd\` directory</span></span>
<span class="line"><span style="color:#FFCB6B;">wget</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://rollkit.dev/cosmwasm/init.sh</span></span></code></pre></div><p>This copies over our <code>init.sh</code> script to initialize our CosmWasm rollup.</p><p>You can view the contents of the script to see how we initialize the CosmWasm Rollup.</p><p>You can initialize the script with the following command:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">bash</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">init.sh</span></span></code></pre></div><p>With that, we have kickstarted our <code>wasmd</code> network!</p><p>View your rollup by <a href="https://celenium.io" target="_blank" rel="noreferrer">finding your namespace or account Celenium</a>.</p><p><a href="https://celenium.io/namespace/000000000000000000000000000000000000000008e5f679bf7116cb" target="_blank" rel="noreferrer">View the example rollup&#39;s namespace on Celenium</a>.</p><h3 id="view-script" tabindex="-1">💠 Optional: see what&#39;s inside the script <a class="header-anchor" href="#view-script" aria-label="Permalink to &quot;💠 Optional: see what&#39;s inside the script {#view-script}&quot;">​</a></h3><p>You can skip this section, but it is important to know how Rollkit is initializing the cosmwasm rollup.</p><p><a href="https://rollkit.dev/cosmwasm/init.sh" target="_blank" rel="noreferrer">View the script</a>.</p><h2 id="contract-deployment-on-cosmwasm" tabindex="-1">📒 Contract deployment on CosmWasm with Rollkit <a class="header-anchor" href="#contract-deployment-on-cosmwasm" aria-label="Permalink to &quot;📒 Contract deployment on CosmWasm with Rollkit {#contract-deployment-on-cosmwasm}&quot;">​</a></h2><h3 id="compile-smart-contract" tabindex="-1">🤖 Compile the smart contract <a class="header-anchor" href="#compile-smart-contract" aria-label="Permalink to &quot;🤖 Compile the smart contract {#compile-smart-contract}&quot;">​</a></h3><p>In a new terminal instance, we will run the following commands to pull down the Nameservice smart contract and compile it:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">clone</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://github.com/InterWasm/cw-contracts</span></span>
<span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cw-contracts</span></span>
<span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">contracts/nameservice</span></span>
<span class="line"><span style="color:#FFCB6B;">cargo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">wasm</span></span></code></pre></div><p>The compiled contract is outputted to: <code>target/wasm32-unknown-unknown/release/cw_nameservice.wasm</code>.</p><h3 id="unit-tests" tabindex="-1">🧪 Unit tests <a class="header-anchor" href="#unit-tests" aria-label="Permalink to &quot;🧪 Unit tests {#unit-tests}&quot;">​</a></h3><p>If we want to run tests, we can do so with the following command in the <code>~/cw-contracts/contracts/nameservice</code> directory:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">cargo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">unit-test</span></span></code></pre></div><h3 id="optimized-smart-contract" tabindex="-1">🏎️ Optimized smart contract <a class="header-anchor" href="#optimized-smart-contract" aria-label="Permalink to &quot;🏎️ Optimized smart contract {#optimized-smart-contract}&quot;">​</a></h3><p>Because we are deploying the compiled smart contract to <code>wasmd</code>, we want it to be as small as possible.</p><p>The CosmWasm team provides a tool called <code>rust-optimizer</code>, which requires <a href="#docker-installation">Docker</a> in order to compile.</p><p>Run the following command in the <code>~/cw-contracts/contracts/nameservice</code> directory:</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-00fXK" id="tab-gWP-uvh" checked="checked"><label for="tab-gWP-uvh">AMD Machines</label><input type="radio" name="group-00fXK" id="tab-3fQ4rWQ"><label for="tab-3fQ4rWQ">ARM Machines</label></div><div class="blocks"><div class="language-bash active"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--rm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-v</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;$(</span><span style="color:#82AAFF;">pwd</span><span style="color:#89DDFF;">)&quot;</span><span style="color:#C3E88D;">:/code</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">--mount</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">type=volume,source=</span><span style="color:#89DDFF;">&quot;$(</span><span style="color:#FFCB6B;">basename</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&quot;$(</span><span style="color:#82AAFF;">pwd</span><span style="color:#89DDFF;">)&quot;)</span><span style="color:#C3E88D;">_cache</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">,target=/code/target</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">--mount</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">type=volume,source=registry_cache,target=/usr/local/cargo/registry</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">cosmwasm/rust-optimizer:0.12.6</span></span></code></pre></div><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--platform</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">linux/arm64</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--rm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-v</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;$(</span><span style="color:#82AAFF;">pwd</span><span style="color:#89DDFF;">)&quot;</span><span style="color:#C3E88D;">:/code</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">--mount</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">type=volume,source=</span><span style="color:#89DDFF;">&quot;$(</span><span style="color:#FFCB6B;">basename</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&quot;$(</span><span style="color:#82AAFF;">pwd</span><span style="color:#89DDFF;">)&quot;)</span><span style="color:#C3E88D;">_cache</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">,target=/code/target</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">--mount</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">type=volume,source=registry_cache,target=/usr/local/cargo/registry</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">cosmwasm/rust-optimizer-arm64:0.12.8</span></span></code></pre></div></div></div><p>This will place the optimized Wasm bytecode at <code>artifacts/cw_nameservice.wasm</code>.</p><h3 id="contract-deployment" tabindex="-1">🚀 Contract deployment <a class="header-anchor" href="#contract-deployment" aria-label="Permalink to &quot;🚀 Contract deployment {#contract-deployment}&quot;">​</a></h3><p>Let&#39;s now deploy our smart contract!</p><p>In order to deploy a contract, you can use the command line as described below. For a better experience and to use Rust code instead of the command line to deploy/script and test your contracts, you can use <a href="/docs-preview/pr-368/guides/cw-orch">cw-orchestrator</a>.</p><p>Run the following in the <code>~/cw-contracts/contracts/nameservice</code> directory:</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-aByCg" id="tab-TJ2M4Gm" checked="checked"><label for="tab-TJ2M4Gm">AMD Machines</label><input type="radio" name="group-aByCg" id="tab-d12NDrl"><label for="tab-d12NDrl">ARM Machines</label></div><div class="blocks"><div class="language-bash active"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">TX_HASH</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">$(</span><span style="color:#FFCB6B;">wasmd</span><span style="color:#C3E88D;"> tx wasm store artifacts/cw_nameservice.wasm --from celeswasm-key --keyring-backend test --chain-id celeswasm --gas-prices </span><span style="color:#F78C6C;">0.025</span><span style="color:#C3E88D;">uwasm --gas auto --gas-adjustment </span><span style="color:#F78C6C;">1.3</span><span style="color:#C3E88D;"> --node http://127.0.0.1:36657 --output json -y </span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;"> </span><span style="color:#FFCB6B;">jq</span><span style="color:#C3E88D;"> -r </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.txhash</span><span style="color:#89DDFF;">&#39;)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> $TX_HASH</span></span></code></pre></div><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">TX_HASH</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">$(</span><span style="color:#FFCB6B;">wasmd</span><span style="color:#C3E88D;"> tx wasm store artifacts/cw_nameservice-aarch64.wasm --from celeswasm-key --keyring-backend test --chain-id celeswasm --gas-prices </span><span style="color:#F78C6C;">0.025</span><span style="color:#C3E88D;">uwasm --gas auto --gas-adjustment </span><span style="color:#F78C6C;">1.3</span><span style="color:#C3E88D;"> --node http://127.0.0.1:36657 --output json -y </span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;"> </span><span style="color:#FFCB6B;">jq</span><span style="color:#C3E88D;"> -r </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.txhash</span><span style="color:#89DDFF;">&#39;)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> $TX_HASH</span></span></code></pre></div></div></div><p>This will get you the transaction hash for the smart contract deployment. Given we are using Rollkit, there will be a delay on the transaction being included due to Rollkit waiting on Celestia&#39;s data availability layer to confirm the block has been included before submitting a new block.</p><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>If you run into errors with variables on the previous command, or commands in the remainder of the tutorial, cross-reference the variables in the command with the variables in the <code>init.sh</code> script.</p></div><h2 id="contract-interaction-on-celestia" tabindex="-1">🌟 Contract interaction on CosmWasm with Celestia <a class="header-anchor" href="#contract-interaction-on-celestia" aria-label="Permalink to &quot;🌟 Contract interaction on CosmWasm with Celestia {#contract-interaction-on-celestia}&quot;">​</a></h2><p>In the previous steps, we have stored out contract&#39;s tx hash in an environment variable for later use.</p><p>The following guide will show you how to deploy and interact with a contract using CLI. For scripting using Rust, you can use <a href="/docs-preview/pr-368/guides/cw-orch">cw-orchestrator</a>.</p><p>Because of the longer time periods of submitting transactions via Rollkit due to waiting on Celestia&#39;s data availability layer to confirm block inclusion, we will need to query our tx hash directly to get information about it.</p><h3 id="contract-querying" tabindex="-1">🔎 Contract querying <a class="header-anchor" href="#contract-querying" aria-label="Permalink to &quot;🔎 Contract querying {#contract-querying}&quot;">​</a></h3><p>Let&#39;s start by querying our transaction hash for its code ID:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">CODE_ID</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">$(</span><span style="color:#FFCB6B;">wasmd</span><span style="color:#C3E88D;"> query tx --type=hash </span><span style="color:#A6ACCD;">$TX_HASH</span><span style="color:#C3E88D;"> --node http://127.0.0.1:36657 --output json </span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;"> </span><span style="color:#FFCB6B;">jq</span><span style="color:#C3E88D;"> -r </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.events[-1].attributes[1].value</span><span style="color:#89DDFF;">&#39;)</span></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> $CODE_ID</span></span></code></pre></div><p>This will give us back the Code ID of the deployed contract.</p><p>In our case, since it&#39;s the first contract deployed on our local network, the value is <code>1</code>.</p><p>Now, we can take a look at the contracts instantiated by this Code ID:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">wasmd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">query</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">wasm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">list-contract-by-code</span><span style="color:#A6ACCD;"> $CODE_ID </span><span style="color:#C3E88D;">--node</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">http://127.0.0.1:36657</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--output</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">json</span></span></code></pre></div><p>We get the following output:</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">contracts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:[],</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">pagination</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:{</span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">next_key</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:null,</span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">total</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">}}</span></span></code></pre></div><h3 id="contract-instantiation" tabindex="-1">📃 Contract instantiation <a class="header-anchor" href="#contract-instantiation" aria-label="Permalink to &quot;📃 Contract instantiation {#contract-instantiation}&quot;">​</a></h3><p>We start instantiating the contract by writing up the following <code>INIT</code> message for nameservice contract. Here, we are specifying that <code>purchase_price</code> of a name is <code>100uwasm</code> and <code>transfer_price</code> is <code>999uwasm</code>.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">INIT</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">{&quot;purchase_price&quot;:{&quot;amount&quot;:&quot;100&quot;,&quot;denom&quot;:&quot;uwasm&quot;},&quot;transfer_price&quot;:{&quot;amount&quot;:&quot;999&quot;,&quot;denom&quot;:&quot;uwasm&quot;}}</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#FFCB6B;">wasmd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tx</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">wasm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">instantiate</span><span style="color:#A6ACCD;"> $CODE_ID </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">$INIT</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--from</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">celeswasm-key</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--keyring-backend</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--label</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">name service</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--chain-id</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">celeswasm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--gas-prices</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.025</span><span style="color:#C3E88D;">uwasm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--gas</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">auto</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--gas-adjustment</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1.3</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-y</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--no-admin</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--node</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">http://127.0.0.1:36657</span></span></code></pre></div><h3 id="contract-interaction" tabindex="-1">📄 Contract interaction <a class="header-anchor" href="#contract-interaction" aria-label="Permalink to &quot;📄 Contract interaction {#contract-interaction}&quot;">​</a></h3><p>Now that we instantiated it, we can interact further with the contract:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">wasmd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">query</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">wasm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">list-contract-by-code</span><span style="color:#A6ACCD;"> $CODE_ID </span><span style="color:#C3E88D;">--output</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">json</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--node</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">http://127.0.0.1:36657</span></span>
<span class="line"><span style="color:#A6ACCD;">CONTRACT</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">$(</span><span style="color:#FFCB6B;">wasmd</span><span style="color:#C3E88D;"> query wasm list-contract-by-code </span><span style="color:#A6ACCD;">$CODE_ID</span><span style="color:#C3E88D;"> --output json --node http://127.0.0.1:36657 </span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;"> </span><span style="color:#FFCB6B;">jq</span><span style="color:#C3E88D;"> -r </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.contracts[-1]</span><span style="color:#89DDFF;">&#39;)</span></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> $CONTRACT</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">wasmd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">query</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">wasm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">contract</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--node</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">http://127.0.0.1:36657</span><span style="color:#A6ACCD;"> $CONTRACT</span></span>
<span class="line"><span style="color:#FFCB6B;">wasmd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">query</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">bank</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">balances</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--node</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">http://127.0.0.1:36657</span><span style="color:#A6ACCD;"> $CONTRACT</span></span></code></pre></div><p>This allows us to see the contract address, contract details, and bank balances.</p><p>Your output will look similar to below:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span><span style="color:#FFCB6B;">&quot;contracts&quot;</span><span style="color:#82AAFF;">:</span><span style="color:#A6ACCD;">[</span><span style="color:#FFCB6B;">&quot;wasm14hj2tavq8fpesdwxxcu44rty3hh90vhujrvcmstl4zr3txmfvw9s0phg4d&quot;</span><span style="color:#FFCB6B;">],</span><span style="color:#FFCB6B;">&quot;pagination&quot;</span><span style="color:#82AAFF;">:</span><span style="color:#A6ACCD;">{&quot;</span><span style="color:#FFCB6B;">next_key</span><span style="color:#FFCB6B;">&quot;:null,&quot;</span><span style="color:#FFCB6B;">total</span><span style="color:#FFCB6B;">&quot;:&quot;</span><span style="color:#FFCB6B;">0</span><span style="color:#FFCB6B;">&quot;}}</span></span>
<span class="line"><span style="color:#FFCB6B;">wasm14hj2tavq8fpesdwxxcu44rty3hh90vhujrvcmstl4zr3txmfvw9s0phg4d</span></span>
<span class="line"><span style="color:#FFCB6B;">address: wasm14hj2tavq8fpesdwxxcu44rty3hh90vhujrvcmstl4zr3txmfvw9s0phg4d</span></span>
<span class="line"><span style="color:#FFCB6B;">contract_info:</span></span>
<span class="line"><span style="color:#FFCB6B;">  admin: &quot;&quot;</span></span>
<span class="line"><span style="color:#FFCB6B;">  code_id: &quot;</span><span style="color:#FFCB6B;">1</span><span style="color:#FFCB6B;">&quot;</span></span>
<span class="line"><span style="color:#FFCB6B;">  created: null</span></span>
<span class="line"><span style="color:#FFCB6B;">  creator: wasm1y9ceqvnsnm9xtcdmhrjvv4rslgwfzmrzky2c5z</span></span>
<span class="line"><span style="color:#FFCB6B;">  extension: null</span></span>
<span class="line"><span style="color:#FFCB6B;">  ibc_port_id: &quot;&quot;</span></span>
<span class="line"><span style="color:#FFCB6B;">  label: name service</span></span>
<span class="line"><span style="color:#FFCB6B;">balances: []</span></span>
<span class="line"><span style="color:#FFCB6B;">pagination:</span></span>
<span class="line"><span style="color:#FFCB6B;">  next_key: null</span></span>
<span class="line"><span style="color:#FFCB6B;">  total: &quot;</span><span style="color:#FFCB6B;">0</span><span style="color:#FFCB6B;">&quot;</span></span></code></pre></div><p>Now, let&#39;s register a name to the contract for our wallet address:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">REGISTER</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">{&quot;register&quot;:{&quot;name&quot;:&quot;fred&quot;}}</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#FFCB6B;">wasmd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tx</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">wasm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">execute</span><span style="color:#A6ACCD;"> $CONTRACT </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">$REGISTER</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--amount</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#C3E88D;">uwasm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--from</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">celeswasm-key</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--chain-id</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">celeswasm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--gas-prices</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.025</span><span style="color:#C3E88D;">uwasm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--gas</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">auto</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--gas-adjustment</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1.3</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--node</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">http://127.0.0.1:36657</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--keyring-backend</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-y</span></span></code></pre></div><p>Your output will look similar to below:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">DEIP</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--keyring-backend</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-y</span></span>
<span class="line"><span style="color:#FFCB6B;">gas</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">estimate:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">167533</span></span>
<span class="line"><span style="color:#FFCB6B;">code:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#FFCB6B;">codespace:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;&quot;</span></span>
<span class="line"><span style="color:#FFCB6B;">data:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;&quot;</span></span>
<span class="line"><span style="color:#FFCB6B;">events:</span><span style="color:#A6ACCD;"> []</span></span>
<span class="line"><span style="color:#FFCB6B;">gas_used:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">0</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#FFCB6B;">gas_wanted:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">0</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#FFCB6B;">height:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">0</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#FFCB6B;">info:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;&quot;</span></span>
<span class="line"><span style="color:#FFCB6B;">logs:</span><span style="color:#A6ACCD;"> []</span></span>
<span class="line"><span style="color:#FFCB6B;">raw_log:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">[]</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#FFCB6B;">timestamp:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;&quot;</span></span>
<span class="line"><span style="color:#FFCB6B;">tx:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">null</span></span>
<span class="line"><span style="color:#FFCB6B;">txhash:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">C147257485B72E7FFA5FDB943C94CE951A37817554339586FFD645AD2AA397C3</span></span></code></pre></div><p>If you try to register the same name again, you&#39;ll see an expected error:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">Error:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">rpc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">error:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">code</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Unknown</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">desc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">rpc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">error:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">code</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Unknown</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">desc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">failed</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">to</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">execute</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">message</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">message</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">index:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#C3E88D;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Name</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">has</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">been</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">taken</span><span style="color:#A6ACCD;"> (name </span><span style="color:#C3E88D;">fred</span><span style="color:#A6ACCD;">): execute wasm contract failed </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">CosmWasm/wasmd/x/wasm/keeper/keeper.go:364</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> With gas wanted: </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">0</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> and gas used: </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">123809</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">:</span><span style="color:#A6ACCD;"> unknown request</span></span></code></pre></div><p>Next, query the owner of the name record:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">NAME_QUERY</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">{&quot;resolve_record&quot;: {&quot;name&quot;: &quot;fred&quot;}}</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#FFCB6B;">wasmd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">query</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">wasm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">contract-state</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">smart</span><span style="color:#A6ACCD;"> $CONTRACT </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">$NAME_QUERY</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--node</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">http://127.0.0.1:36657</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--output</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">json</span></span></code></pre></div><p>You&#39;ll see the owner&#39;s address in a JSON response:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span><span style="color:#FFCB6B;">&quot;data&quot;</span><span style="color:#82AAFF;">:</span><span style="color:#A6ACCD;">{&quot;</span><span style="color:#FFCB6B;">address</span><span style="color:#FFCB6B;">&quot;:&quot;</span><span style="color:#FFCB6B;">wasm1y9ceqvnsnm9xtcdmhrjvv4rslgwfzmrzky2c5z</span><span style="color:#FFCB6B;">&quot;}}</span></span></code></pre></div><p>With that, we have instantiated and interacted with the CosmWasm nameservice smart contract using Celestia!</p>`,107),m=JSON.parse('{"title":"🗞️ CosmWasm rollup","description":"","frontmatter":{"head":[["meta",{"name":"og:title","content":"🗞️ CosmWasm rollup | Rollkit"},{"name":"og:description","content":false}]]},"headers":[],"relativePath":"tutorials/cosmwasm.md","filePath":"tutorials/cosmwasm.md","lastUpdated":1715126324000}'),y={name:"tutorials/cosmwasm.md"},F=Object.assign(y,{setup(D){return(d,A)=>(o(),l("div",null,[p,c,s("div",r,[i,e(n)]),C]))}});export{m as __pageData,F as default};
